
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000924  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000acc  08000acc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000acc  08000acc  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000acc  08000acc  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000acc  08000acc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000acc  08000acc  00010acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ad0  08000ad0  00010ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000ad4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000151b  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000485  00000000  00000000  0002154f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000130  00000000  00000000  000219d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000f8  00000000  00000000  00021b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003479  00000000  00000000  00021c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001739  00000000  00000000  00025079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a778  00000000  00000000  000267b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00030f2a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000003fc  00000000  00000000  00030f7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000004 	.word	0x20000004
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000ab4 	.word	0x08000ab4

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000008 	.word	0x20000008
 80001e4:	08000ab4 	.word	0x08000ab4

080001e8 <SPI_PeriClockControl>:
 *
 */

//Peripheral Clock Setup
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t enordi)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
 80001f0:	460b      	mov	r3, r1
 80001f2:	70fb      	strb	r3, [r7, #3]
	switch(enordi){
 80001f4:	78fb      	ldrb	r3, [r7, #3]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d035      	beq.n	8000266 <SPI_PeriClockControl+0x7e>
 80001fa:	2b01      	cmp	r3, #1
 80001fc:	d167      	bne.n	80002ce <SPI_PeriClockControl+0xe6>
	case 1:
		if(pSPIx == SPI1){
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	4a36      	ldr	r2, [pc, #216]	; (80002dc <SPI_PeriClockControl+0xf4>)
 8000202:	4293      	cmp	r3, r2
 8000204:	d108      	bne.n	8000218 <SPI_PeriClockControl+0x30>
			SPI1_PCLK_EN;
 8000206:	4b36      	ldr	r3, [pc, #216]	; (80002e0 <SPI_PeriClockControl+0xf8>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800020c:	4b34      	ldr	r3, [pc, #208]	; (80002e0 <SPI_PeriClockControl+0xf8>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000214:	645a      	str	r2, [r3, #68]	; 0x44
			break;
 8000216:	e05b      	b.n	80002d0 <SPI_PeriClockControl+0xe8>
		}else if(pSPIx == SPI2){
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	4a32      	ldr	r2, [pc, #200]	; (80002e4 <SPI_PeriClockControl+0xfc>)
 800021c:	4293      	cmp	r3, r2
 800021e:	d108      	bne.n	8000232 <SPI_PeriClockControl+0x4a>
			SPI2_PCLK_EN;
 8000220:	4b2f      	ldr	r3, [pc, #188]	; (80002e0 <SPI_PeriClockControl+0xf8>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000226:	4b2e      	ldr	r3, [pc, #184]	; (80002e0 <SPI_PeriClockControl+0xf8>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800022e:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8000230:	e04e      	b.n	80002d0 <SPI_PeriClockControl+0xe8>
		}else if(pSPIx == SPI3){
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	4a2c      	ldr	r2, [pc, #176]	; (80002e8 <SPI_PeriClockControl+0x100>)
 8000236:	4293      	cmp	r3, r2
 8000238:	d108      	bne.n	800024c <SPI_PeriClockControl+0x64>
			SPI3_PCLK_EN;
 800023a:	4b29      	ldr	r3, [pc, #164]	; (80002e0 <SPI_PeriClockControl+0xf8>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000240:	4b27      	ldr	r3, [pc, #156]	; (80002e0 <SPI_PeriClockControl+0xf8>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000248:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 800024a:	e041      	b.n	80002d0 <SPI_PeriClockControl+0xe8>
		}else if(pSPIx == SPI4){
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	4a27      	ldr	r2, [pc, #156]	; (80002ec <SPI_PeriClockControl+0x104>)
 8000250:	4293      	cmp	r3, r2
 8000252:	d108      	bne.n	8000266 <SPI_PeriClockControl+0x7e>
			SPI4_PCLK_EN;
 8000254:	4b22      	ldr	r3, [pc, #136]	; (80002e0 <SPI_PeriClockControl+0xf8>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800025a:	4b21      	ldr	r3, [pc, #132]	; (80002e0 <SPI_PeriClockControl+0xf8>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000262:	645a      	str	r2, [r3, #68]	; 0x44
			break;
 8000264:	e034      	b.n	80002d0 <SPI_PeriClockControl+0xe8>
		}
	case 0:
		if(pSPIx == SPI1){
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	4a1c      	ldr	r2, [pc, #112]	; (80002dc <SPI_PeriClockControl+0xf4>)
 800026a:	4293      	cmp	r3, r2
 800026c:	d108      	bne.n	8000280 <SPI_PeriClockControl+0x98>
			SPI1_PCLK_DI;
 800026e:	4b1c      	ldr	r3, [pc, #112]	; (80002e0 <SPI_PeriClockControl+0xf8>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000274:	4b1a      	ldr	r3, [pc, #104]	; (80002e0 <SPI_PeriClockControl+0xf8>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800027c:	645a      	str	r2, [r3, #68]	; 0x44
			break;
 800027e:	e027      	b.n	80002d0 <SPI_PeriClockControl+0xe8>
		}else if(pSPIx == SPI2){
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	4a18      	ldr	r2, [pc, #96]	; (80002e4 <SPI_PeriClockControl+0xfc>)
 8000284:	4293      	cmp	r3, r2
 8000286:	d108      	bne.n	800029a <SPI_PeriClockControl+0xb2>
			SPI2_PCLK_DI;
 8000288:	4b15      	ldr	r3, [pc, #84]	; (80002e0 <SPI_PeriClockControl+0xf8>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800028e:	4b14      	ldr	r3, [pc, #80]	; (80002e0 <SPI_PeriClockControl+0xf8>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000296:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8000298:	e01a      	b.n	80002d0 <SPI_PeriClockControl+0xe8>
		}else if(pSPIx == SPI3){
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	4a12      	ldr	r2, [pc, #72]	; (80002e8 <SPI_PeriClockControl+0x100>)
 800029e:	4293      	cmp	r3, r2
 80002a0:	d108      	bne.n	80002b4 <SPI_PeriClockControl+0xcc>
			SPI3_PCLK_DI;
 80002a2:	4b0f      	ldr	r3, [pc, #60]	; (80002e0 <SPI_PeriClockControl+0xf8>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80002a8:	4b0d      	ldr	r3, [pc, #52]	; (80002e0 <SPI_PeriClockControl+0xf8>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80002b0:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 80002b2:	e00d      	b.n	80002d0 <SPI_PeriClockControl+0xe8>
		}else if(pSPIx == SPI4){
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	4a0d      	ldr	r2, [pc, #52]	; (80002ec <SPI_PeriClockControl+0x104>)
 80002b8:	4293      	cmp	r3, r2
 80002ba:	d108      	bne.n	80002ce <SPI_PeriClockControl+0xe6>
			SPI4_PCLK_DI;
 80002bc:	4b08      	ldr	r3, [pc, #32]	; (80002e0 <SPI_PeriClockControl+0xf8>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80002c2:	4b07      	ldr	r3, [pc, #28]	; (80002e0 <SPI_PeriClockControl+0xf8>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80002ca:	645a      	str	r2, [r3, #68]	; 0x44
			break;
 80002cc:	e000      	b.n	80002d0 <SPI_PeriClockControl+0xe8>
		}default:
			break;
 80002ce:	bf00      	nop
	}
}
 80002d0:	bf00      	nop
 80002d2:	370c      	adds	r7, #12
 80002d4:	46bd      	mov	sp, r7
 80002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002da:	4770      	bx	lr
 80002dc:	40013000 	.word	0x40013000
 80002e0:	20000000 	.word	0x20000000
 80002e4:	40003800 	.word	0x40003800
 80002e8:	40003c00 	.word	0x40003c00
 80002ec:	40003400 	.word	0x40003400

080002f0 <SPI_Init>:

//Init & De-Init
void SPI_Init(SPI_Handle_t *pSPIHandler, uint8_t tx_or_rx)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b084      	sub	sp, #16
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
 80002f8:	460b      	mov	r3, r1
 80002fa:	70fb      	strb	r3, [r7, #3]
	SPI_PeriClockControl(pSPIHandler->pSPIx, ENABLE);
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	2101      	movs	r1, #1
 8000302:	4618      	mov	r0, r3
 8000304:	f7ff ff70 	bl	80001e8 <SPI_PeriClockControl>

	uint32_t tempReg = 0;
 8000308:	2300      	movs	r3, #0
 800030a:	60fb      	str	r3, [r7, #12]
	//configure slave/master for device
	tempReg |= (pSPIHandler->SPI_Config.SPI_DEVICEMODE << SPI_CR1_MSTER);
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	7a5b      	ldrb	r3, [r3, #9]
 8000310:	009b      	lsls	r3, r3, #2
 8000312:	461a      	mov	r2, r3
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	4313      	orrs	r3, r2
 8000318:	60fb      	str	r3, [r7, #12]

	//configure baud rate for SPI peripheral
	tempReg |= (pSPIHandler->SPI_Config.SPI_Speed << SPI_CR1_BAUDRATE);
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	799b      	ldrb	r3, [r3, #6]
 800031e:	00db      	lsls	r3, r3, #3
 8000320:	461a      	mov	r2, r3
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	4313      	orrs	r3, r2
 8000326:	60fb      	str	r3, [r7, #12]

	//configure slave management
	tempReg |= (pSPIHandler->SPI_Config.SPI_SSM << SPI_CR1_SSM);
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	795b      	ldrb	r3, [r3, #5]
 800032c:	025b      	lsls	r3, r3, #9
 800032e:	461a      	mov	r2, r3
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	4313      	orrs	r3, r2
 8000334:	60fb      	str	r3, [r7, #12]

	tempReg |= (pSPIHandler->SPI_Config.SPI_CPOL << SPI_CR1_CPOL);
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	7a1b      	ldrb	r3, [r3, #8]
 800033a:	005b      	lsls	r3, r3, #1
 800033c:	461a      	mov	r2, r3
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	4313      	orrs	r3, r2
 8000342:	60fb      	str	r3, [r7, #12]

	tempReg |= (pSPIHandler->SPI_Config.SPI_CPHA << SPI_CR1_CPHA);
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	79db      	ldrb	r3, [r3, #7]
 8000348:	461a      	mov	r2, r3
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	4313      	orrs	r3, r2
 800034e:	60fb      	str	r3, [r7, #12]

	SPI_busConfig(pSPIHandler, tx_or_rx);
 8000350:	78fb      	ldrb	r3, [r7, #3]
 8000352:	4619      	mov	r1, r3
 8000354:	6878      	ldr	r0, [r7, #4]
 8000356:	f000 f808 	bl	800036a <SPI_busConfig>


//input settings into the register
	pSPIHandler->pSPIx->SPI_CR1 = tempReg;
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	68fa      	ldr	r2, [r7, #12]
 8000360:	601a      	str	r2, [r3, #0]

}
 8000362:	bf00      	nop
 8000364:	3710      	adds	r7, #16
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}

0800036a <SPI_busConfig>:
	spi_enable_spe(pSPIx, DISABLE);
}

//use SPI_RX or SPI_TX for tx_or_rx
void SPI_busConfig(SPI_Handle_t *pSPIHandler, uint8_t tx_or_rx)
{
 800036a:	b480      	push	{r7}
 800036c:	b083      	sub	sp, #12
 800036e:	af00      	add	r7, sp, #0
 8000370:	6078      	str	r0, [r7, #4]
 8000372:	460b      	mov	r3, r1
 8000374:	70fb      	strb	r3, [r7, #3]
	if(pSPIHandler->SPI_Config.BusConfig == SPI_CONFIG_FD)
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	791b      	ldrb	r3, [r3, #4]
 800037a:	2b02      	cmp	r3, #2
 800037c:	d112      	bne.n	80003a4 <SPI_busConfig+0x3a>
	{	//reset bidimode for 2 line unidirection data
		pSPIHandler->pSPIx->SPI_CR1 |= (RESET << SPI_CR1_BIDI_MODE);
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	681a      	ldr	r2, [r3, #0]
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	6812      	ldr	r2, [r2, #0]
 8000388:	601a      	str	r2, [r3, #0]
		//ensure bidioe is reset not needed for Full duplex
		pSPIHandler->pSPIx->SPI_CR1 |= (RESET << SPI_CR1_BIDI_OE);
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	681a      	ldr	r2, [r3, #0]
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	6812      	ldr	r2, [r2, #0]
 8000394:	601a      	str	r2, [r3, #0]
		//reset rx-only bit
		pSPIHandler->pSPIx->SPI_CR1 |= (RESET << SPI_CR1_RX_ONLY);
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	681a      	ldr	r2, [r3, #0]
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	6812      	ldr	r2, [r2, #0]
 80003a0:	601a      	str	r2, [r3, #0]
		pSPIHandler->pSPIx->SPI_CR1 |= (RESET << SPI_CR1_RX_ONLY);
		//enable tx or rx mode
		pSPIHandler->pSPIx->SPI_CR1 |= (SET << SPI_CR1_BIDI_OE);

	}
}
 80003a2:	e01d      	b.n	80003e0 <SPI_busConfig+0x76>
	else if(pSPIHandler->SPI_Config.BusConfig == (uint8_t)SPI_CONFIG_HD || pSPIHandler->SPI_Config.BusConfig == (uint8_t)SPI_SIMPLEX_RX_ONLY)
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	791b      	ldrb	r3, [r3, #4]
 80003a8:	2b01      	cmp	r3, #1
 80003aa:	d003      	beq.n	80003b4 <SPI_busConfig+0x4a>
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	791b      	ldrb	r3, [r3, #4]
 80003b0:	2b03      	cmp	r3, #3
 80003b2:	d115      	bne.n	80003e0 <SPI_busConfig+0x76>
		pSPIHandler->pSPIx->SPI_CR1 |= (SET << SPI_CR1_BIDI_MODE);
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	681a      	ldr	r2, [r3, #0]
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80003c2:	601a      	str	r2, [r3, #0]
		pSPIHandler->pSPIx->SPI_CR1 |= (RESET << SPI_CR1_RX_ONLY);
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681a      	ldr	r2, [r3, #0]
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	6812      	ldr	r2, [r2, #0]
 80003ce:	601a      	str	r2, [r3, #0]
		pSPIHandler->pSPIx->SPI_CR1 |= (SET << SPI_CR1_BIDI_OE);
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	681a      	ldr	r2, [r3, #0]
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80003de:	601a      	str	r2, [r3, #0]
}
 80003e0:	bf00      	nop
 80003e2:	370c      	adds	r7, #12
 80003e4:	46bd      	mov	sp, r7
 80003e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ea:	4770      	bx	lr

080003ec <SPI_SSOEConfig>:
		return false;
	}
}

void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, bool enable)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
 80003f4:	460b      	mov	r3, r1
 80003f6:	70fb      	strb	r3, [r7, #3]
	if(enable)
 80003f8:	78fb      	ldrb	r3, [r7, #3]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d006      	beq.n	800040c <SPI_SSOEConfig+0x20>
	{
		pSPIx->SPI_CR2 |= (ENABLE << SPI_CR2_SSOE);
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	685b      	ldr	r3, [r3, #4]
 8000402:	f043 0204 	orr.w	r2, r3, #4
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	605a      	str	r2, [r3, #4]
	else
	{
		pSPIx->SPI_CR2 |= (DISABLE << SPI_CR2_SSOE);

	}
}
 800040a:	e003      	b.n	8000414 <SPI_SSOEConfig+0x28>
		pSPIx->SPI_CR2 |= (DISABLE << SPI_CR2_SSOE);
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	685a      	ldr	r2, [r3, #4]
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	605a      	str	r2, [r3, #4]
}
 8000414:	bf00      	nop
 8000416:	370c      	adds	r7, #12
 8000418:	46bd      	mov	sp, r7
 800041a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041e:	4770      	bx	lr

08000420 <GPIO_PeriClockControl>:
 *
 * @Note              -  none
 */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
 8000428:	460b      	mov	r3, r1
 800042a:	70fb      	strb	r3, [r7, #3]

if(EnorDi == ENABLE)
 800042c:	78fb      	ldrb	r3, [r7, #3]
 800042e:	2b01      	cmp	r3, #1
 8000430:	f040 80e9 	bne.w	8000606 <GPIO_PeriClockControl+0x1e6>
{
	if(pGPIOx == GPIOA)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	4a77      	ldr	r2, [pc, #476]	; (8000614 <GPIO_PeriClockControl+0x1f4>)
 8000438:	4293      	cmp	r3, r2
 800043a:	d108      	bne.n	800044e <GPIO_PeriClockControl+0x2e>
	{
		GPIOA_PCLK_EN;
 800043c:	4b76      	ldr	r3, [pc, #472]	; (8000618 <GPIO_PeriClockControl+0x1f8>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000442:	4b75      	ldr	r3, [pc, #468]	; (8000618 <GPIO_PeriClockControl+0x1f8>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	f042 0201 	orr.w	r2, r2, #1
 800044a:	631a      	str	r2, [r3, #48]	; 0x30
			GPIOI_PCLK_DI;
		}
	}
}

}
 800044c:	e0db      	b.n	8000606 <GPIO_PeriClockControl+0x1e6>
	else if(pGPIOx == GPIOB)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4a72      	ldr	r2, [pc, #456]	; (800061c <GPIO_PeriClockControl+0x1fc>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d108      	bne.n	8000468 <GPIO_PeriClockControl+0x48>
		GPIOB_PCLK_EN;
 8000456:	4b70      	ldr	r3, [pc, #448]	; (8000618 <GPIO_PeriClockControl+0x1f8>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800045c:	4b6e      	ldr	r3, [pc, #440]	; (8000618 <GPIO_PeriClockControl+0x1f8>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	f042 0202 	orr.w	r2, r2, #2
 8000464:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000466:	e0ce      	b.n	8000606 <GPIO_PeriClockControl+0x1e6>
	else if(pGPIOx == GPIOC)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	4a6d      	ldr	r2, [pc, #436]	; (8000620 <GPIO_PeriClockControl+0x200>)
 800046c:	4293      	cmp	r3, r2
 800046e:	d108      	bne.n	8000482 <GPIO_PeriClockControl+0x62>
		GPIOC_PCLK_EN;
 8000470:	4b69      	ldr	r3, [pc, #420]	; (8000618 <GPIO_PeriClockControl+0x1f8>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000476:	4b68      	ldr	r3, [pc, #416]	; (8000618 <GPIO_PeriClockControl+0x1f8>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f042 0204 	orr.w	r2, r2, #4
 800047e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000480:	e0c1      	b.n	8000606 <GPIO_PeriClockControl+0x1e6>
	else if(pGPIOx == GPIOD)
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	4a67      	ldr	r2, [pc, #412]	; (8000624 <GPIO_PeriClockControl+0x204>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d108      	bne.n	800049c <GPIO_PeriClockControl+0x7c>
		GPIOD_PCLK_EN;
 800048a:	4b63      	ldr	r3, [pc, #396]	; (8000618 <GPIO_PeriClockControl+0x1f8>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000490:	4b61      	ldr	r3, [pc, #388]	; (8000618 <GPIO_PeriClockControl+0x1f8>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	f042 0208 	orr.w	r2, r2, #8
 8000498:	631a      	str	r2, [r3, #48]	; 0x30
}
 800049a:	e0b4      	b.n	8000606 <GPIO_PeriClockControl+0x1e6>
	else if(pGPIOx == GPIOE)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	4a62      	ldr	r2, [pc, #392]	; (8000628 <GPIO_PeriClockControl+0x208>)
 80004a0:	4293      	cmp	r3, r2
 80004a2:	d108      	bne.n	80004b6 <GPIO_PeriClockControl+0x96>
		GPIOE_PCLK_EN;
 80004a4:	4b5c      	ldr	r3, [pc, #368]	; (8000618 <GPIO_PeriClockControl+0x1f8>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004aa:	4b5b      	ldr	r3, [pc, #364]	; (8000618 <GPIO_PeriClockControl+0x1f8>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	f042 0210 	orr.w	r2, r2, #16
 80004b2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80004b4:	e0a7      	b.n	8000606 <GPIO_PeriClockControl+0x1e6>
	else if(pGPIOx == GPIOF)
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	4a5c      	ldr	r2, [pc, #368]	; (800062c <GPIO_PeriClockControl+0x20c>)
 80004ba:	4293      	cmp	r3, r2
 80004bc:	d108      	bne.n	80004d0 <GPIO_PeriClockControl+0xb0>
		GPIOF_PCLK_EN;
 80004be:	4b56      	ldr	r3, [pc, #344]	; (8000618 <GPIO_PeriClockControl+0x1f8>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004c4:	4b54      	ldr	r3, [pc, #336]	; (8000618 <GPIO_PeriClockControl+0x1f8>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	f042 0210 	orr.w	r2, r2, #16
 80004cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80004ce:	e09a      	b.n	8000606 <GPIO_PeriClockControl+0x1e6>
	else if(pGPIOx == GPIOG)
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	4a57      	ldr	r2, [pc, #348]	; (8000630 <GPIO_PeriClockControl+0x210>)
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d108      	bne.n	80004ea <GPIO_PeriClockControl+0xca>
		GPIOG_PCLK_EN;
 80004d8:	4b4f      	ldr	r3, [pc, #316]	; (8000618 <GPIO_PeriClockControl+0x1f8>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004de:	4b4e      	ldr	r3, [pc, #312]	; (8000618 <GPIO_PeriClockControl+0x1f8>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80004e6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80004e8:	e08d      	b.n	8000606 <GPIO_PeriClockControl+0x1e6>
	else if(pGPIOx == GPIOH)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	4a51      	ldr	r2, [pc, #324]	; (8000634 <GPIO_PeriClockControl+0x214>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d108      	bne.n	8000504 <GPIO_PeriClockControl+0xe4>
		GPIOH_PCLK_EN;
 80004f2:	4b49      	ldr	r3, [pc, #292]	; (8000618 <GPIO_PeriClockControl+0x1f8>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004f8:	4b47      	ldr	r3, [pc, #284]	; (8000618 <GPIO_PeriClockControl+0x1f8>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000500:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000502:	e080      	b.n	8000606 <GPIO_PeriClockControl+0x1e6>
	else if(pGPIOx == GPIOI)
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4a4c      	ldr	r2, [pc, #304]	; (8000638 <GPIO_PeriClockControl+0x218>)
 8000508:	4293      	cmp	r3, r2
 800050a:	d108      	bne.n	800051e <GPIO_PeriClockControl+0xfe>
		GPIOI_PCLK_EN;
 800050c:	4b42      	ldr	r3, [pc, #264]	; (8000618 <GPIO_PeriClockControl+0x1f8>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000512:	4b41      	ldr	r3, [pc, #260]	; (8000618 <GPIO_PeriClockControl+0x1f8>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800051a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800051c:	e073      	b.n	8000606 <GPIO_PeriClockControl+0x1e6>
		if(pGPIOx == GPIOA)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	4a3c      	ldr	r2, [pc, #240]	; (8000614 <GPIO_PeriClockControl+0x1f4>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d108      	bne.n	8000538 <GPIO_PeriClockControl+0x118>
			GPIOA_PCLK_DI;
 8000526:	4b3c      	ldr	r3, [pc, #240]	; (8000618 <GPIO_PeriClockControl+0x1f8>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800052c:	4b3a      	ldr	r3, [pc, #232]	; (8000618 <GPIO_PeriClockControl+0x1f8>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f022 0201 	bic.w	r2, r2, #1
 8000534:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000536:	e066      	b.n	8000606 <GPIO_PeriClockControl+0x1e6>
		else if(pGPIOx == GPIOB)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	4a38      	ldr	r2, [pc, #224]	; (800061c <GPIO_PeriClockControl+0x1fc>)
 800053c:	4293      	cmp	r3, r2
 800053e:	d108      	bne.n	8000552 <GPIO_PeriClockControl+0x132>
			GPIOB_PCLK_DI;
 8000540:	4b35      	ldr	r3, [pc, #212]	; (8000618 <GPIO_PeriClockControl+0x1f8>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000546:	4b34      	ldr	r3, [pc, #208]	; (8000618 <GPIO_PeriClockControl+0x1f8>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	f022 0202 	bic.w	r2, r2, #2
 800054e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000550:	e059      	b.n	8000606 <GPIO_PeriClockControl+0x1e6>
		else if(pGPIOx == GPIOC)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4a32      	ldr	r2, [pc, #200]	; (8000620 <GPIO_PeriClockControl+0x200>)
 8000556:	4293      	cmp	r3, r2
 8000558:	d108      	bne.n	800056c <GPIO_PeriClockControl+0x14c>
			GPIOC_PCLK_DI;
 800055a:	4b2f      	ldr	r3, [pc, #188]	; (8000618 <GPIO_PeriClockControl+0x1f8>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000560:	4b2d      	ldr	r3, [pc, #180]	; (8000618 <GPIO_PeriClockControl+0x1f8>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f022 0204 	bic.w	r2, r2, #4
 8000568:	631a      	str	r2, [r3, #48]	; 0x30
}
 800056a:	e04c      	b.n	8000606 <GPIO_PeriClockControl+0x1e6>
		else if(pGPIOx == GPIOD)
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	4a2d      	ldr	r2, [pc, #180]	; (8000624 <GPIO_PeriClockControl+0x204>)
 8000570:	4293      	cmp	r3, r2
 8000572:	d108      	bne.n	8000586 <GPIO_PeriClockControl+0x166>
			GPIOD_PCLK_DI;
 8000574:	4b28      	ldr	r3, [pc, #160]	; (8000618 <GPIO_PeriClockControl+0x1f8>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800057a:	4b27      	ldr	r3, [pc, #156]	; (8000618 <GPIO_PeriClockControl+0x1f8>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	f022 0208 	bic.w	r2, r2, #8
 8000582:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000584:	e03f      	b.n	8000606 <GPIO_PeriClockControl+0x1e6>
		else if(pGPIOx == GPIOE)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4a27      	ldr	r2, [pc, #156]	; (8000628 <GPIO_PeriClockControl+0x208>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d108      	bne.n	80005a0 <GPIO_PeriClockControl+0x180>
			GPIOE_PCLK_DI;
 800058e:	4b22      	ldr	r3, [pc, #136]	; (8000618 <GPIO_PeriClockControl+0x1f8>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000594:	4b20      	ldr	r3, [pc, #128]	; (8000618 <GPIO_PeriClockControl+0x1f8>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f022 0210 	bic.w	r2, r2, #16
 800059c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800059e:	e032      	b.n	8000606 <GPIO_PeriClockControl+0x1e6>
		else if(pGPIOx == GPIOF)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	4a22      	ldr	r2, [pc, #136]	; (800062c <GPIO_PeriClockControl+0x20c>)
 80005a4:	4293      	cmp	r3, r2
 80005a6:	d108      	bne.n	80005ba <GPIO_PeriClockControl+0x19a>
			GPIOF_PCLK_DI;
 80005a8:	4b1b      	ldr	r3, [pc, #108]	; (8000618 <GPIO_PeriClockControl+0x1f8>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005ae:	4b1a      	ldr	r3, [pc, #104]	; (8000618 <GPIO_PeriClockControl+0x1f8>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	f022 0210 	bic.w	r2, r2, #16
 80005b6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80005b8:	e025      	b.n	8000606 <GPIO_PeriClockControl+0x1e6>
		else if(pGPIOx == GPIOG)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	4a1c      	ldr	r2, [pc, #112]	; (8000630 <GPIO_PeriClockControl+0x210>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d108      	bne.n	80005d4 <GPIO_PeriClockControl+0x1b4>
			GPIOG_PCLK_DI;
 80005c2:	4b15      	ldr	r3, [pc, #84]	; (8000618 <GPIO_PeriClockControl+0x1f8>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005c8:	4b13      	ldr	r3, [pc, #76]	; (8000618 <GPIO_PeriClockControl+0x1f8>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80005d0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80005d2:	e018      	b.n	8000606 <GPIO_PeriClockControl+0x1e6>
		else if(pGPIOx == GPIOH)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	4a17      	ldr	r2, [pc, #92]	; (8000634 <GPIO_PeriClockControl+0x214>)
 80005d8:	4293      	cmp	r3, r2
 80005da:	d108      	bne.n	80005ee <GPIO_PeriClockControl+0x1ce>
			GPIOH_PCLK_DI;
 80005dc:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <GPIO_PeriClockControl+0x1f8>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005e2:	4b0d      	ldr	r3, [pc, #52]	; (8000618 <GPIO_PeriClockControl+0x1f8>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80005ea:	631a      	str	r2, [r3, #48]	; 0x30
}
 80005ec:	e00b      	b.n	8000606 <GPIO_PeriClockControl+0x1e6>
		else if(pGPIOx == GPIOI)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4a11      	ldr	r2, [pc, #68]	; (8000638 <GPIO_PeriClockControl+0x218>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d107      	bne.n	8000606 <GPIO_PeriClockControl+0x1e6>
			GPIOI_PCLK_DI;
 80005f6:	4b08      	ldr	r3, [pc, #32]	; (8000618 <GPIO_PeriClockControl+0x1f8>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <GPIO_PeriClockControl+0x1f8>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000604:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000606:	bf00      	nop
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	40020000 	.word	0x40020000
 8000618:	20000000 	.word	0x20000000
 800061c:	40020400 	.word	0x40020400
 8000620:	40020800 	.word	0x40020800
 8000624:	40020c00 	.word	0x40020c00
 8000628:	40021000 	.word	0x40021000
 800062c:	40021400 	.word	0x40021400
 8000630:	40021800 	.word	0x40021800
 8000634:	40021c00 	.word	0x40021c00
 8000638:	40022000 	.word	0x40022000

0800063c <GPIO_Init>:

/*
 *  Init - Deinit
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]

GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2101      	movs	r1, #1
 800064a:	4618      	mov	r0, r3
 800064c:	f7ff fee8 	bl	8000420 <GPIO_PeriClockControl>

//Configure pin mode

//if interrupt is true
if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode < GPIO_MODE_IT_FT){
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	795b      	ldrb	r3, [r3, #5]
 8000654:	2b03      	cmp	r3, #3
 8000656:	d810      	bhi.n	800067a <GPIO_Init+0x3e>

	pGPIOHandle->pGPIOx->MODER |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <<
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	795b      	ldrb	r3, [r3, #5]
 8000662:	4619      	mov	r1, r3
			(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	791b      	ldrb	r3, [r3, #4]
 8000668:	005b      	lsls	r3, r3, #1
	pGPIOHandle->pGPIOx->MODER |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <<
 800066a:	fa01 f303 	lsl.w	r3, r1, r3
 800066e:	4619      	mov	r1, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	430a      	orrs	r2, r1
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	e0c6      	b.n	8000808 <GPIO_Init+0x1cc>

}else{

	//configure pin mode
	pGPIOHandle->pGPIOx->MODER |= (GPIO_MODE_INPUT << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681a      	ldr	r2, [r3, #0]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	6812      	ldr	r2, [r2, #0]
 8000684:	601a      	str	r2, [r3, #0]

	//configure pin for desired interrupt trigger type
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	795b      	ldrb	r3, [r3, #5]
 800068a:	2b04      	cmp	r3, #4
 800068c:	d117      	bne.n	80006be <GPIO_Init+0x82>


		//configure falling edge
		EXTI->FTRS |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800068e:	4b8d      	ldr	r3, [pc, #564]	; (80008c4 <GPIO_Init+0x288>)
 8000690:	68db      	ldr	r3, [r3, #12]
 8000692:	687a      	ldr	r2, [r7, #4]
 8000694:	7912      	ldrb	r2, [r2, #4]
 8000696:	4611      	mov	r1, r2
 8000698:	2201      	movs	r2, #1
 800069a:	408a      	lsls	r2, r1
 800069c:	4611      	mov	r1, r2
 800069e:	4a89      	ldr	r2, [pc, #548]	; (80008c4 <GPIO_Init+0x288>)
 80006a0:	430b      	orrs	r3, r1
 80006a2:	60d3      	str	r3, [r2, #12]
		//make sure that rising edge is clear
		EXTI->RTSR &= ~ (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006a4:	4b87      	ldr	r3, [pc, #540]	; (80008c4 <GPIO_Init+0x288>)
 80006a6:	689b      	ldr	r3, [r3, #8]
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	7912      	ldrb	r2, [r2, #4]
 80006ac:	4611      	mov	r1, r2
 80006ae:	2201      	movs	r2, #1
 80006b0:	408a      	lsls	r2, r1
 80006b2:	43d2      	mvns	r2, r2
 80006b4:	4611      	mov	r1, r2
 80006b6:	4a83      	ldr	r2, [pc, #524]	; (80008c4 <GPIO_Init+0x288>)
 80006b8:	400b      	ands	r3, r1
 80006ba:	6093      	str	r3, [r2, #8]
 80006bc:	e035      	b.n	800072a <GPIO_Init+0xee>

	}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	795b      	ldrb	r3, [r3, #5]
 80006c2:	2b05      	cmp	r3, #5
 80006c4:	d117      	bne.n	80006f6 <GPIO_Init+0xba>
		//configure for rising edge
		EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006c6:	4b7f      	ldr	r3, [pc, #508]	; (80008c4 <GPIO_Init+0x288>)
 80006c8:	689b      	ldr	r3, [r3, #8]
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	7912      	ldrb	r2, [r2, #4]
 80006ce:	4611      	mov	r1, r2
 80006d0:	2201      	movs	r2, #1
 80006d2:	408a      	lsls	r2, r1
 80006d4:	4611      	mov	r1, r2
 80006d6:	4a7b      	ldr	r2, [pc, #492]	; (80008c4 <GPIO_Init+0x288>)
 80006d8:	430b      	orrs	r3, r1
 80006da:	6093      	str	r3, [r2, #8]
		//make sure falling edge is clear
		EXTI->FTRS &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006dc:	4b79      	ldr	r3, [pc, #484]	; (80008c4 <GPIO_Init+0x288>)
 80006de:	68db      	ldr	r3, [r3, #12]
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	7912      	ldrb	r2, [r2, #4]
 80006e4:	4611      	mov	r1, r2
 80006e6:	2201      	movs	r2, #1
 80006e8:	408a      	lsls	r2, r1
 80006ea:	43d2      	mvns	r2, r2
 80006ec:	4611      	mov	r1, r2
 80006ee:	4a75      	ldr	r2, [pc, #468]	; (80008c4 <GPIO_Init+0x288>)
 80006f0:	400b      	ands	r3, r1
 80006f2:	60d3      	str	r3, [r2, #12]
 80006f4:	e019      	b.n	800072a <GPIO_Init+0xee>

	}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	795b      	ldrb	r3, [r3, #5]
 80006fa:	2b06      	cmp	r3, #6
 80006fc:	d115      	bne.n	800072a <GPIO_Init+0xee>
		//configure rising & falling edge
		EXTI->FTRS |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006fe:	4b71      	ldr	r3, [pc, #452]	; (80008c4 <GPIO_Init+0x288>)
 8000700:	68db      	ldr	r3, [r3, #12]
 8000702:	687a      	ldr	r2, [r7, #4]
 8000704:	7912      	ldrb	r2, [r2, #4]
 8000706:	4611      	mov	r1, r2
 8000708:	2201      	movs	r2, #1
 800070a:	408a      	lsls	r2, r1
 800070c:	4611      	mov	r1, r2
 800070e:	4a6d      	ldr	r2, [pc, #436]	; (80008c4 <GPIO_Init+0x288>)
 8000710:	430b      	orrs	r3, r1
 8000712:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000714:	4b6b      	ldr	r3, [pc, #428]	; (80008c4 <GPIO_Init+0x288>)
 8000716:	689b      	ldr	r3, [r3, #8]
 8000718:	687a      	ldr	r2, [r7, #4]
 800071a:	7912      	ldrb	r2, [r2, #4]
 800071c:	4611      	mov	r1, r2
 800071e:	2201      	movs	r2, #1
 8000720:	408a      	lsls	r2, r1
 8000722:	4611      	mov	r1, r2
 8000724:	4a67      	ldr	r2, [pc, #412]	; (80008c4 <GPIO_Init+0x288>)
 8000726:	430b      	orrs	r3, r1
 8000728:	6093      	str	r3, [r2, #8]

	}

	//enable the interrupt over that pin/port + enable pclk for syscfg
	uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	791b      	ldrb	r3, [r3, #4]
 800072e:	089b      	lsrs	r3, r3, #2
 8000730:	73fb      	strb	r3, [r7, #15]
	uint8_t temp2 = (4 *(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4) );
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	791b      	ldrb	r3, [r3, #4]
 8000736:	f003 0303 	and.w	r3, r3, #3
 800073a:	b2db      	uxtb	r3, r3
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	73bb      	strb	r3, [r7, #14]
	uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a60      	ldr	r2, [pc, #384]	; (80008c8 <GPIO_Init+0x28c>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d039      	beq.n	80007be <GPIO_Init+0x182>
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a5f      	ldr	r2, [pc, #380]	; (80008cc <GPIO_Init+0x290>)
 8000750:	4293      	cmp	r3, r2
 8000752:	d032      	beq.n	80007ba <GPIO_Init+0x17e>
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a5d      	ldr	r2, [pc, #372]	; (80008d0 <GPIO_Init+0x294>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d02b      	beq.n	80007b6 <GPIO_Init+0x17a>
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a5c      	ldr	r2, [pc, #368]	; (80008d4 <GPIO_Init+0x298>)
 8000764:	4293      	cmp	r3, r2
 8000766:	d024      	beq.n	80007b2 <GPIO_Init+0x176>
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a5a      	ldr	r2, [pc, #360]	; (80008d8 <GPIO_Init+0x29c>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d01d      	beq.n	80007ae <GPIO_Init+0x172>
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4a59      	ldr	r2, [pc, #356]	; (80008dc <GPIO_Init+0x2a0>)
 8000778:	4293      	cmp	r3, r2
 800077a:	d016      	beq.n	80007aa <GPIO_Init+0x16e>
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a57      	ldr	r2, [pc, #348]	; (80008e0 <GPIO_Init+0x2a4>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d00f      	beq.n	80007a6 <GPIO_Init+0x16a>
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a56      	ldr	r2, [pc, #344]	; (80008e4 <GPIO_Init+0x2a8>)
 800078c:	4293      	cmp	r3, r2
 800078e:	d008      	beq.n	80007a2 <GPIO_Init+0x166>
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a54      	ldr	r2, [pc, #336]	; (80008e8 <GPIO_Init+0x2ac>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d101      	bne.n	800079e <GPIO_Init+0x162>
 800079a:	2308      	movs	r3, #8
 800079c:	e010      	b.n	80007c0 <GPIO_Init+0x184>
 800079e:	2300      	movs	r3, #0
 80007a0:	e00e      	b.n	80007c0 <GPIO_Init+0x184>
 80007a2:	2307      	movs	r3, #7
 80007a4:	e00c      	b.n	80007c0 <GPIO_Init+0x184>
 80007a6:	2306      	movs	r3, #6
 80007a8:	e00a      	b.n	80007c0 <GPIO_Init+0x184>
 80007aa:	2305      	movs	r3, #5
 80007ac:	e008      	b.n	80007c0 <GPIO_Init+0x184>
 80007ae:	2304      	movs	r3, #4
 80007b0:	e006      	b.n	80007c0 <GPIO_Init+0x184>
 80007b2:	2303      	movs	r3, #3
 80007b4:	e004      	b.n	80007c0 <GPIO_Init+0x184>
 80007b6:	2302      	movs	r3, #2
 80007b8:	e002      	b.n	80007c0 <GPIO_Init+0x184>
 80007ba:	2301      	movs	r3, #1
 80007bc:	e000      	b.n	80007c0 <GPIO_Init+0x184>
 80007be:	2300      	movs	r3, #0
 80007c0:	737b      	strb	r3, [r7, #13]
	SYSCFG_PCLK_EN;
 80007c2:	4b4a      	ldr	r3, [pc, #296]	; (80008ec <GPIO_Init+0x2b0>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007c8:	4b48      	ldr	r3, [pc, #288]	; (80008ec <GPIO_Init+0x2b0>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80007d0:	645a      	str	r2, [r3, #68]	; 0x44
	SYSCFG->EXTICR[temp1] |= (portCode << temp2);
 80007d2:	4a47      	ldr	r2, [pc, #284]	; (80008f0 <GPIO_Init+0x2b4>)
 80007d4:	7bfb      	ldrb	r3, [r7, #15]
 80007d6:	3302      	adds	r3, #2
 80007d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007dc:	7b79      	ldrb	r1, [r7, #13]
 80007de:	7bbb      	ldrb	r3, [r7, #14]
 80007e0:	fa01 f303 	lsl.w	r3, r1, r3
 80007e4:	4618      	mov	r0, r3
 80007e6:	4942      	ldr	r1, [pc, #264]	; (80008f0 <GPIO_Init+0x2b4>)
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
 80007ea:	4302      	orrs	r2, r0
 80007ec:	3302      	adds	r3, #2
 80007ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//enable exti interrupt using imr
	EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007f2:	4b34      	ldr	r3, [pc, #208]	; (80008c4 <GPIO_Init+0x288>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	687a      	ldr	r2, [r7, #4]
 80007f8:	7912      	ldrb	r2, [r2, #4]
 80007fa:	4611      	mov	r1, r2
 80007fc:	2201      	movs	r2, #1
 80007fe:	408a      	lsls	r2, r1
 8000800:	4611      	mov	r1, r2
 8000802:	4a30      	ldr	r2, [pc, #192]	; (80008c4 <GPIO_Init+0x288>)
 8000804:	430b      	orrs	r3, r1
 8000806:	6013      	str	r3, [r2, #0]


}

//configure pin speed
pGPIOHandle->pGPIOx->OSPEEDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed <<
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	689a      	ldr	r2, [r3, #8]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	79db      	ldrb	r3, [r3, #7]
 8000812:	4619      	mov	r1, r3
		(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	791b      	ldrb	r3, [r3, #4]
 8000818:	005b      	lsls	r3, r3, #1
pGPIOHandle->pGPIOx->OSPEEDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed <<
 800081a:	fa01 f303 	lsl.w	r3, r1, r3
 800081e:	4619      	mov	r1, r3
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	430a      	orrs	r2, r1
 8000826:	609a      	str	r2, [r3, #8]

//Configure Alt Function Mode

if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	795b      	ldrb	r3, [r3, #5]
 800082c:	2b02      	cmp	r3, #2
 800082e:	d126      	bne.n	800087e <GPIO_Init+0x242>
{
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber > 7)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	791b      	ldrb	r3, [r3, #4]
 8000834:	2b07      	cmp	r3, #7
 8000836:	d912      	bls.n	800085e <GPIO_Init+0x222>
	{
		pGPIOHandle->pGPIOx->AFRH |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode <<
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	7a5b      	ldrb	r3, [r3, #9]
 8000842:	4619      	mov	r1, r3
				(4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8)));
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	791b      	ldrb	r3, [r3, #4]
 8000848:	f003 0307 	and.w	r3, r3, #7
 800084c:	009b      	lsls	r3, r3, #2
		pGPIOHandle->pGPIOx->AFRH |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode <<
 800084e:	fa01 f303 	lsl.w	r3, r1, r3
 8000852:	4619      	mov	r1, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	430a      	orrs	r2, r1
 800085a:	625a      	str	r2, [r3, #36]	; 0x24
 800085c:	e00f      	b.n	800087e <GPIO_Init+0x242>
	}
	else
	{
		pGPIOHandle->pGPIOx->AFRL |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode <<
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	6a1a      	ldr	r2, [r3, #32]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	7a5b      	ldrb	r3, [r3, #9]
 8000868:	4619      	mov	r1, r3
						(4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	791b      	ldrb	r3, [r3, #4]
 800086e:	009b      	lsls	r3, r3, #2
		pGPIOHandle->pGPIOx->AFRL |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode <<
 8000870:	fa01 f303 	lsl.w	r3, r1, r3
 8000874:	4619      	mov	r1, r3
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	430a      	orrs	r2, r1
 800087c:	621a      	str	r2, [r3, #32]
	}
}
//Configure open drain/push pull
(pGPIOHandle->pGPIOx->OTYPER |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType  << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));//clear
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	685a      	ldr	r2, [r3, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	799b      	ldrb	r3, [r3, #6]
 8000888:	4619      	mov	r1, r3
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	791b      	ldrb	r3, [r3, #4]
 800088e:	fa01 f303 	lsl.w	r3, r1, r3
 8000892:	4619      	mov	r1, r3
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	430a      	orrs	r2, r1
 800089a:	605a      	str	r2, [r3, #4]

//configure pull up/pull down register
(pGPIOHandle->pGPIOx->PUPDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPDcontrol) <<
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	68da      	ldr	r2, [r3, #12]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	7a1b      	ldrb	r3, [r3, #8]
 80008a6:	4619      	mov	r1, r3
		(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));//set
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	791b      	ldrb	r3, [r3, #4]
 80008ac:	005b      	lsls	r3, r3, #1
(pGPIOHandle->pGPIOx->PUPDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPDcontrol) <<
 80008ae:	fa01 f303 	lsl.w	r3, r1, r3
 80008b2:	4619      	mov	r1, r3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	430a      	orrs	r2, r1
 80008ba:	60da      	str	r2, [r3, #12]



}
 80008bc:	bf00      	nop
 80008be:	3710      	adds	r7, #16
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40013c00 	.word	0x40013c00
 80008c8:	40020000 	.word	0x40020000
 80008cc:	40020400 	.word	0x40020400
 80008d0:	40020800 	.word	0x40020800
 80008d4:	40020c00 	.word	0x40020c00
 80008d8:	40021000 	.word	0x40021000
 80008dc:	40021400 	.word	0x40021400
 80008e0:	40021800 	.word	0x40021800
 80008e4:	40021c00 	.word	0x40021c00
 80008e8:	40022000 	.word	0x40022000
 80008ec:	20000000 	.word	0x20000000
 80008f0:	40013800 	.word	0x40013800

080008f4 <spi_config>:
void delay(void)
{
	for(int i = 0; i < 500000; i++);
}
void spi_config(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
	SPI_Handle_t SPIx = {0};
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
	//configure pin for spi2
	SPIx.pSPIx = SPI2;
 8000904:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <spi_config+0x4c>)
 8000906:	607b      	str	r3, [r7, #4]
	SPIx.SPI_Config.BusConfig = SPI_CONFIG_FD;
 8000908:	2302      	movs	r3, #2
 800090a:	723b      	strb	r3, [r7, #8]
	SPIx.SPI_Config.SPI_CPOL = IDLE_LOW;
 800090c:	2300      	movs	r3, #0
 800090e:	733b      	strb	r3, [r7, #12]
	SPIx.SPI_Config.SPI_CPHA = LEADING_EDGE;
 8000910:	2300      	movs	r3, #0
 8000912:	72fb      	strb	r3, [r7, #11]
	SPIx.SPI_Config.SPI_DEVICEMODE = SPI_MASTER;
 8000914:	2301      	movs	r3, #1
 8000916:	737b      	strb	r3, [r7, #13]
	SPIx.SPI_Config.SPI_SSM = SPI_HW_SSM;
 8000918:	2300      	movs	r3, #0
 800091a:	727b      	strb	r3, [r7, #9]
	SPIx.SPI_Config.SPI_DFF = DFF_8BIT;
 800091c:	2300      	movs	r3, #0
 800091e:	73bb      	strb	r3, [r7, #14]
	SPIx.SPI_Config.SPI_Speed = DIVISOR_8;
 8000920:	2302      	movs	r3, #2
 8000922:	72bb      	strb	r3, [r7, #10]

	SPI_Init(&SPIx, SPI_RX);
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	2100      	movs	r1, #0
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff fce1 	bl	80002f0 <SPI_Init>
	SPI_busConfig(&SPIx, SPI_TX);
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	2101      	movs	r1, #1
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff fd19 	bl	800036a <SPI_busConfig>
}
 8000938:	bf00      	nop
 800093a:	3710      	adds	r7, #16
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40003800 	.word	0x40003800

08000944 <spi_pin_config>:

void spi_pin_config(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
	//setup MOSI pin
	GPIO_Handle_t gpiox = {0};
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
	gpiox.pGPIOx = GPIOB;
 8000954:	4b10      	ldr	r3, [pc, #64]	; (8000998 <spi_pin_config+0x54>)
 8000956:	607b      	str	r3, [r7, #4]
	gpiox.GPIO_PinConfig.GPIO_PinAltFunMode = GPIO_AF5;
 8000958:	2305      	movs	r3, #5
 800095a:	737b      	strb	r3, [r7, #13]
	gpiox.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800095c:	2302      	movs	r3, #2
 800095e:	727b      	strb	r3, [r7, #9]
	gpiox.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_15;
 8000960:	230f      	movs	r3, #15
 8000962:	723b      	strb	r3, [r7, #8]
	gpiox.GPIO_PinConfig.GPIO_PinPuPDcontrol = GPIO_NO_PUPD;
 8000964:	2300      	movs	r3, #0
 8000966:	733b      	strb	r3, [r7, #12]
	gpiox.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000968:	2300      	movs	r3, #0
 800096a:	72bb      	strb	r3, [r7, #10]
	gpiox.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 800096c:	2302      	movs	r3, #2
 800096e:	72fb      	strb	r3, [r7, #11]
	GPIO_Init(&gpiox);
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff fe62 	bl	800063c <GPIO_Init>

	gpiox.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 8000978:	230d      	movs	r3, #13
 800097a:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&gpiox);
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff fe5c 	bl	800063c <GPIO_Init>


	gpiox.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_12;
 8000984:	230c      	movs	r3, #12
 8000986:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&gpiox);
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff fe56 	bl	800063c <GPIO_Init>

}
 8000990:	bf00      	nop
 8000992:	3710      	adds	r7, #16
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40020400 	.word	0x40020400

0800099c <user_button>:

void user_button(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
	GPIO_Handle_t pGPIOx = {0};
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]

	pGPIOx.pGPIOx = GPIOA;
 80009ac:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <user_button+0x34>)
 80009ae:	607b      	str	r3, [r7, #4]
	//This line should do everything needed to enable interrupt in pgpio init
	pGPIOx.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_INPUT;
 80009b0:	2300      	movs	r3, #0
 80009b2:	727b      	strb	r3, [r7, #9]
	pGPIOx.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	723b      	strb	r3, [r7, #8]
	pGPIOx.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80009b8:	2300      	movs	r3, #0
 80009ba:	72bb      	strb	r3, [r7, #10]
	pGPIOx.GPIO_PinConfig.GPIO_PinSpeed = GPIO_NO_PUPD;
 80009bc:	2300      	movs	r3, #0
 80009be:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&pGPIOx);
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff fe3a 	bl	800063c <GPIO_Init>
}
 80009c8:	bf00      	nop
 80009ca:	3710      	adds	r7, #16
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40020000 	.word	0x40020000

080009d4 <main>:



int main(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
	//data to send


	spi_config();
 80009d8:	f7ff ff8c 	bl	80008f4 <spi_config>
	spi_pin_config();
 80009dc:	f7ff ffb2 	bl	8000944 <spi_pin_config>
	user_button();
 80009e0:	f7ff ffdc 	bl	800099c <user_button>

	SPI_SSOEConfig(SPI2, ENABLE);
 80009e4:	2101      	movs	r1, #1
 80009e6:	480a      	ldr	r0, [pc, #40]	; (8000a10 <main+0x3c>)
 80009e8:	f7ff fd00 	bl	80003ec <SPI_SSOEConfig>
	while(1)
	{
		rcc_inst->AHB1ENR |= (1 << 15);
 80009ec:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <main+0x40>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009f2:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <main+0x40>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80009fa:	631a      	str	r2, [r3, #48]	; 0x30
		SPI1_PCLK_EN;
 80009fc:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <main+0x40>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000a02:	4b04      	ldr	r3, [pc, #16]	; (8000a14 <main+0x40>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000a0a:	645a      	str	r2, [r3, #68]	; 0x44
		rcc_inst->AHB1ENR |= (1 << 15);
 8000a0c:	e7ee      	b.n	80009ec <main+0x18>
 8000a0e:	bf00      	nop
 8000a10:	40003800 	.word	0x40003800
 8000a14:	20000000 	.word	0x20000000

08000a18 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a18:	480d      	ldr	r0, [pc, #52]	; (8000a50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a1a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a1c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a20:	480c      	ldr	r0, [pc, #48]	; (8000a54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a22:	490d      	ldr	r1, [pc, #52]	; (8000a58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a24:	4a0d      	ldr	r2, [pc, #52]	; (8000a5c <LoopForever+0xe>)
  movs r3, #0
 8000a26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a28:	e002      	b.n	8000a30 <LoopCopyDataInit>

08000a2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a2e:	3304      	adds	r3, #4

08000a30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a34:	d3f9      	bcc.n	8000a2a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a36:	4a0a      	ldr	r2, [pc, #40]	; (8000a60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a38:	4c0a      	ldr	r4, [pc, #40]	; (8000a64 <LoopForever+0x16>)
  movs r3, #0
 8000a3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a3c:	e001      	b.n	8000a42 <LoopFillZerobss>

08000a3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a40:	3204      	adds	r2, #4

08000a42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a44:	d3fb      	bcc.n	8000a3e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a46:	f000 f811 	bl	8000a6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a4a:	f7ff ffc3 	bl	80009d4 <main>

08000a4e <LoopForever>:

LoopForever:
  b LoopForever
 8000a4e:	e7fe      	b.n	8000a4e <LoopForever>
  ldr   r0, =_estack
 8000a50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a58:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000a5c:	08000ad4 	.word	0x08000ad4
  ldr r2, =_sbss
 8000a60:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000a64:	20000020 	.word	0x20000020

08000a68 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a68:	e7fe      	b.n	8000a68 <ADC_IRQHandler>
	...

08000a6c <__libc_init_array>:
 8000a6c:	b570      	push	{r4, r5, r6, lr}
 8000a6e:	4d0d      	ldr	r5, [pc, #52]	; (8000aa4 <__libc_init_array+0x38>)
 8000a70:	4c0d      	ldr	r4, [pc, #52]	; (8000aa8 <__libc_init_array+0x3c>)
 8000a72:	1b64      	subs	r4, r4, r5
 8000a74:	10a4      	asrs	r4, r4, #2
 8000a76:	2600      	movs	r6, #0
 8000a78:	42a6      	cmp	r6, r4
 8000a7a:	d109      	bne.n	8000a90 <__libc_init_array+0x24>
 8000a7c:	4d0b      	ldr	r5, [pc, #44]	; (8000aac <__libc_init_array+0x40>)
 8000a7e:	4c0c      	ldr	r4, [pc, #48]	; (8000ab0 <__libc_init_array+0x44>)
 8000a80:	f000 f818 	bl	8000ab4 <_init>
 8000a84:	1b64      	subs	r4, r4, r5
 8000a86:	10a4      	asrs	r4, r4, #2
 8000a88:	2600      	movs	r6, #0
 8000a8a:	42a6      	cmp	r6, r4
 8000a8c:	d105      	bne.n	8000a9a <__libc_init_array+0x2e>
 8000a8e:	bd70      	pop	{r4, r5, r6, pc}
 8000a90:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a94:	4798      	blx	r3
 8000a96:	3601      	adds	r6, #1
 8000a98:	e7ee      	b.n	8000a78 <__libc_init_array+0xc>
 8000a9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a9e:	4798      	blx	r3
 8000aa0:	3601      	adds	r6, #1
 8000aa2:	e7f2      	b.n	8000a8a <__libc_init_array+0x1e>
 8000aa4:	08000acc 	.word	0x08000acc
 8000aa8:	08000acc 	.word	0x08000acc
 8000aac:	08000acc 	.word	0x08000acc
 8000ab0:	08000ad0 	.word	0x08000ad0

08000ab4 <_init>:
 8000ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ab6:	bf00      	nop
 8000ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aba:	bc08      	pop	{r3}
 8000abc:	469e      	mov	lr, r3
 8000abe:	4770      	bx	lr

08000ac0 <_fini>:
 8000ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ac2:	bf00      	nop
 8000ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ac6:	bc08      	pop	{r3}
 8000ac8:	469e      	mov	lr, r3
 8000aca:	4770      	bx	lr

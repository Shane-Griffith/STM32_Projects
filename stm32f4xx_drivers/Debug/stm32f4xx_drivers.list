
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004ec  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000694  0800069c  0001069c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000694  08000694  0001069c  2**0
                  CONTENTS
  4 .ARM          00000000  08000694  08000694  0001069c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000694  0800069c  0001069c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000694  08000694  00010694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000698  08000698  00010698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001069c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001069c  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001069c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000ab0  00000000  00000000  000106cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000213  00000000  00000000  0001117c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c0  00000000  00000000  00011390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000098  00000000  00000000  00011450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000025cb  00000000  00000000  000114e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000cdd  00000000  00000000  00013ab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000058b9  00000000  00000000  00014790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0001a049  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000248  00000000  00000000  0001a09c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	0800067c 	.word	0x0800067c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	0800067c 	.word	0x0800067c

080001e8 <GPIO_Init>:

/*
 *  Init - Deinit
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b085      	sub	sp, #20
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]

//Configure pin mode

//if interrupt is true
if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode < GPIO_MODE_IT_FT){
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	795b      	ldrb	r3, [r3, #5]
 80001f4:	2b03      	cmp	r3, #3
 80001f6:	d810      	bhi.n	800021a <GPIO_Init+0x32>

	pGPIOHandle->pGPIOx->MODER |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <<
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	681a      	ldr	r2, [r3, #0]
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	795b      	ldrb	r3, [r3, #5]
 8000202:	4619      	mov	r1, r3
			(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	791b      	ldrb	r3, [r3, #4]
 8000208:	005b      	lsls	r3, r3, #1
	pGPIOHandle->pGPIOx->MODER |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <<
 800020a:	fa01 f303 	lsl.w	r3, r1, r3
 800020e:	4619      	mov	r1, r3
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	430a      	orrs	r2, r1
 8000216:	601a      	str	r2, [r3, #0]
 8000218:	e0c4      	b.n	80003a4 <GPIO_Init+0x1bc>

}else{

	//configure pin mode
	pGPIOHandle->pGPIOx->MODER |= (GPIO_MODE_INPUT << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	681a      	ldr	r2, [r3, #0]
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	6812      	ldr	r2, [r2, #0]
 8000224:	601a      	str	r2, [r3, #0]

	//configure pin for desired interrupt trigger type
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	795b      	ldrb	r3, [r3, #5]
 800022a:	2b04      	cmp	r3, #4
 800022c:	d117      	bne.n	800025e <GPIO_Init+0x76>


		//configure falling edge
		EXTI->FTRS |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800022e:	4b8d      	ldr	r3, [pc, #564]	; (8000464 <GPIO_Init+0x27c>)
 8000230:	68db      	ldr	r3, [r3, #12]
 8000232:	687a      	ldr	r2, [r7, #4]
 8000234:	7912      	ldrb	r2, [r2, #4]
 8000236:	4611      	mov	r1, r2
 8000238:	2201      	movs	r2, #1
 800023a:	408a      	lsls	r2, r1
 800023c:	4611      	mov	r1, r2
 800023e:	4a89      	ldr	r2, [pc, #548]	; (8000464 <GPIO_Init+0x27c>)
 8000240:	430b      	orrs	r3, r1
 8000242:	60d3      	str	r3, [r2, #12]
		//make sure that rising edge is clear
		EXTI->RTSR &= ~ (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000244:	4b87      	ldr	r3, [pc, #540]	; (8000464 <GPIO_Init+0x27c>)
 8000246:	689b      	ldr	r3, [r3, #8]
 8000248:	687a      	ldr	r2, [r7, #4]
 800024a:	7912      	ldrb	r2, [r2, #4]
 800024c:	4611      	mov	r1, r2
 800024e:	2201      	movs	r2, #1
 8000250:	408a      	lsls	r2, r1
 8000252:	43d2      	mvns	r2, r2
 8000254:	4611      	mov	r1, r2
 8000256:	4a83      	ldr	r2, [pc, #524]	; (8000464 <GPIO_Init+0x27c>)
 8000258:	400b      	ands	r3, r1
 800025a:	6093      	str	r3, [r2, #8]
 800025c:	e035      	b.n	80002ca <GPIO_Init+0xe2>

	}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	795b      	ldrb	r3, [r3, #5]
 8000262:	2b05      	cmp	r3, #5
 8000264:	d117      	bne.n	8000296 <GPIO_Init+0xae>
		//configure for rising edge
		EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000266:	4b7f      	ldr	r3, [pc, #508]	; (8000464 <GPIO_Init+0x27c>)
 8000268:	689b      	ldr	r3, [r3, #8]
 800026a:	687a      	ldr	r2, [r7, #4]
 800026c:	7912      	ldrb	r2, [r2, #4]
 800026e:	4611      	mov	r1, r2
 8000270:	2201      	movs	r2, #1
 8000272:	408a      	lsls	r2, r1
 8000274:	4611      	mov	r1, r2
 8000276:	4a7b      	ldr	r2, [pc, #492]	; (8000464 <GPIO_Init+0x27c>)
 8000278:	430b      	orrs	r3, r1
 800027a:	6093      	str	r3, [r2, #8]
		//make sure falling edge is clear
		EXTI->FTRS &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800027c:	4b79      	ldr	r3, [pc, #484]	; (8000464 <GPIO_Init+0x27c>)
 800027e:	68db      	ldr	r3, [r3, #12]
 8000280:	687a      	ldr	r2, [r7, #4]
 8000282:	7912      	ldrb	r2, [r2, #4]
 8000284:	4611      	mov	r1, r2
 8000286:	2201      	movs	r2, #1
 8000288:	408a      	lsls	r2, r1
 800028a:	43d2      	mvns	r2, r2
 800028c:	4611      	mov	r1, r2
 800028e:	4a75      	ldr	r2, [pc, #468]	; (8000464 <GPIO_Init+0x27c>)
 8000290:	400b      	ands	r3, r1
 8000292:	60d3      	str	r3, [r2, #12]
 8000294:	e019      	b.n	80002ca <GPIO_Init+0xe2>

	}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	795b      	ldrb	r3, [r3, #5]
 800029a:	2b06      	cmp	r3, #6
 800029c:	d115      	bne.n	80002ca <GPIO_Init+0xe2>
		//configure rising & falling edge
		EXTI->FTRS |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800029e:	4b71      	ldr	r3, [pc, #452]	; (8000464 <GPIO_Init+0x27c>)
 80002a0:	68db      	ldr	r3, [r3, #12]
 80002a2:	687a      	ldr	r2, [r7, #4]
 80002a4:	7912      	ldrb	r2, [r2, #4]
 80002a6:	4611      	mov	r1, r2
 80002a8:	2201      	movs	r2, #1
 80002aa:	408a      	lsls	r2, r1
 80002ac:	4611      	mov	r1, r2
 80002ae:	4a6d      	ldr	r2, [pc, #436]	; (8000464 <GPIO_Init+0x27c>)
 80002b0:	430b      	orrs	r3, r1
 80002b2:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80002b4:	4b6b      	ldr	r3, [pc, #428]	; (8000464 <GPIO_Init+0x27c>)
 80002b6:	689b      	ldr	r3, [r3, #8]
 80002b8:	687a      	ldr	r2, [r7, #4]
 80002ba:	7912      	ldrb	r2, [r2, #4]
 80002bc:	4611      	mov	r1, r2
 80002be:	2201      	movs	r2, #1
 80002c0:	408a      	lsls	r2, r1
 80002c2:	4611      	mov	r1, r2
 80002c4:	4a67      	ldr	r2, [pc, #412]	; (8000464 <GPIO_Init+0x27c>)
 80002c6:	430b      	orrs	r3, r1
 80002c8:	6093      	str	r3, [r2, #8]

	}

	//enable the interrupt over that pin/port + enable pclk for syscfg
	uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	791b      	ldrb	r3, [r3, #4]
 80002ce:	089b      	lsrs	r3, r3, #2
 80002d0:	73fb      	strb	r3, [r7, #15]
	uint8_t temp2 = (4 *(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4) );
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	791b      	ldrb	r3, [r3, #4]
 80002d6:	f003 0303 	and.w	r3, r3, #3
 80002da:	b2db      	uxtb	r3, r3
 80002dc:	009b      	lsls	r3, r3, #2
 80002de:	73bb      	strb	r3, [r7, #14]
	uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a60      	ldr	r2, [pc, #384]	; (8000468 <GPIO_Init+0x280>)
 80002e6:	4293      	cmp	r3, r2
 80002e8:	d039      	beq.n	800035e <GPIO_Init+0x176>
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	4a5f      	ldr	r2, [pc, #380]	; (800046c <GPIO_Init+0x284>)
 80002f0:	4293      	cmp	r3, r2
 80002f2:	d032      	beq.n	800035a <GPIO_Init+0x172>
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a5d      	ldr	r2, [pc, #372]	; (8000470 <GPIO_Init+0x288>)
 80002fa:	4293      	cmp	r3, r2
 80002fc:	d02b      	beq.n	8000356 <GPIO_Init+0x16e>
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	4a5c      	ldr	r2, [pc, #368]	; (8000474 <GPIO_Init+0x28c>)
 8000304:	4293      	cmp	r3, r2
 8000306:	d024      	beq.n	8000352 <GPIO_Init+0x16a>
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a5a      	ldr	r2, [pc, #360]	; (8000478 <GPIO_Init+0x290>)
 800030e:	4293      	cmp	r3, r2
 8000310:	d01d      	beq.n	800034e <GPIO_Init+0x166>
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	4a59      	ldr	r2, [pc, #356]	; (800047c <GPIO_Init+0x294>)
 8000318:	4293      	cmp	r3, r2
 800031a:	d016      	beq.n	800034a <GPIO_Init+0x162>
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a57      	ldr	r2, [pc, #348]	; (8000480 <GPIO_Init+0x298>)
 8000322:	4293      	cmp	r3, r2
 8000324:	d00f      	beq.n	8000346 <GPIO_Init+0x15e>
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	4a56      	ldr	r2, [pc, #344]	; (8000484 <GPIO_Init+0x29c>)
 800032c:	4293      	cmp	r3, r2
 800032e:	d008      	beq.n	8000342 <GPIO_Init+0x15a>
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4a54      	ldr	r2, [pc, #336]	; (8000488 <GPIO_Init+0x2a0>)
 8000336:	4293      	cmp	r3, r2
 8000338:	d101      	bne.n	800033e <GPIO_Init+0x156>
 800033a:	2308      	movs	r3, #8
 800033c:	e010      	b.n	8000360 <GPIO_Init+0x178>
 800033e:	2300      	movs	r3, #0
 8000340:	e00e      	b.n	8000360 <GPIO_Init+0x178>
 8000342:	2307      	movs	r3, #7
 8000344:	e00c      	b.n	8000360 <GPIO_Init+0x178>
 8000346:	2306      	movs	r3, #6
 8000348:	e00a      	b.n	8000360 <GPIO_Init+0x178>
 800034a:	2305      	movs	r3, #5
 800034c:	e008      	b.n	8000360 <GPIO_Init+0x178>
 800034e:	2304      	movs	r3, #4
 8000350:	e006      	b.n	8000360 <GPIO_Init+0x178>
 8000352:	2303      	movs	r3, #3
 8000354:	e004      	b.n	8000360 <GPIO_Init+0x178>
 8000356:	2302      	movs	r3, #2
 8000358:	e002      	b.n	8000360 <GPIO_Init+0x178>
 800035a:	2301      	movs	r3, #1
 800035c:	e000      	b.n	8000360 <GPIO_Init+0x178>
 800035e:	2300      	movs	r3, #0
 8000360:	737b      	strb	r3, [r7, #13]
	SYSCFG_PCLK_EN();
 8000362:	4b4a      	ldr	r3, [pc, #296]	; (800048c <GPIO_Init+0x2a4>)
 8000364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000366:	4a49      	ldr	r2, [pc, #292]	; (800048c <GPIO_Init+0x2a4>)
 8000368:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800036c:	6453      	str	r3, [r2, #68]	; 0x44
	SYSCFG->EXTICR[temp1] |= (portCode << temp2);
 800036e:	4a48      	ldr	r2, [pc, #288]	; (8000490 <GPIO_Init+0x2a8>)
 8000370:	7bfb      	ldrb	r3, [r7, #15]
 8000372:	3302      	adds	r3, #2
 8000374:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000378:	7b79      	ldrb	r1, [r7, #13]
 800037a:	7bbb      	ldrb	r3, [r7, #14]
 800037c:	fa01 f303 	lsl.w	r3, r1, r3
 8000380:	4618      	mov	r0, r3
 8000382:	4943      	ldr	r1, [pc, #268]	; (8000490 <GPIO_Init+0x2a8>)
 8000384:	7bfb      	ldrb	r3, [r7, #15]
 8000386:	4302      	orrs	r2, r0
 8000388:	3302      	adds	r3, #2
 800038a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//enable exti interrupt using imr
	EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800038e:	4b35      	ldr	r3, [pc, #212]	; (8000464 <GPIO_Init+0x27c>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	687a      	ldr	r2, [r7, #4]
 8000394:	7912      	ldrb	r2, [r2, #4]
 8000396:	4611      	mov	r1, r2
 8000398:	2201      	movs	r2, #1
 800039a:	408a      	lsls	r2, r1
 800039c:	4611      	mov	r1, r2
 800039e:	4a31      	ldr	r2, [pc, #196]	; (8000464 <GPIO_Init+0x27c>)
 80003a0:	430b      	orrs	r3, r1
 80003a2:	6013      	str	r3, [r2, #0]


}

//configure pin speed
pGPIOHandle->pGPIOx->OSPEEDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed <<
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	689a      	ldr	r2, [r3, #8]
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	79db      	ldrb	r3, [r3, #7]
 80003ae:	4619      	mov	r1, r3
		(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	791b      	ldrb	r3, [r3, #4]
 80003b4:	005b      	lsls	r3, r3, #1
pGPIOHandle->pGPIOx->OSPEEDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed <<
 80003b6:	fa01 f303 	lsl.w	r3, r1, r3
 80003ba:	4619      	mov	r1, r3
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	430a      	orrs	r2, r1
 80003c2:	609a      	str	r2, [r3, #8]

//Configure Alt Function Mode

if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	795b      	ldrb	r3, [r3, #5]
 80003c8:	2b02      	cmp	r3, #2
 80003ca:	d126      	bne.n	800041a <GPIO_Init+0x232>
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber > 7){
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	791b      	ldrb	r3, [r3, #4]
 80003d0:	2b07      	cmp	r3, #7
 80003d2:	d912      	bls.n	80003fa <GPIO_Init+0x212>
		pGPIOHandle->pGPIOx->AFRH |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode <<
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	7a5b      	ldrb	r3, [r3, #9]
 80003de:	4619      	mov	r1, r3
				(4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8)));
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	791b      	ldrb	r3, [r3, #4]
 80003e4:	f003 0307 	and.w	r3, r3, #7
 80003e8:	009b      	lsls	r3, r3, #2
		pGPIOHandle->pGPIOx->AFRH |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode <<
 80003ea:	fa01 f303 	lsl.w	r3, r1, r3
 80003ee:	4619      	mov	r1, r3
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	430a      	orrs	r2, r1
 80003f6:	625a      	str	r2, [r3, #36]	; 0x24
 80003f8:	e00f      	b.n	800041a <GPIO_Init+0x232>

	}else{
		pGPIOHandle->pGPIOx->AFRL |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode <<
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	6a1a      	ldr	r2, [r3, #32]
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	7a5b      	ldrb	r3, [r3, #9]
 8000404:	4619      	mov	r1, r3
						(4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	791b      	ldrb	r3, [r3, #4]
 800040a:	009b      	lsls	r3, r3, #2
		pGPIOHandle->pGPIOx->AFRL |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode <<
 800040c:	fa01 f303 	lsl.w	r3, r1, r3
 8000410:	4619      	mov	r1, r3
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	430a      	orrs	r2, r1
 8000418:	621a      	str	r2, [r3, #32]

}


//Configure open drain/push pull
(pGPIOHandle->pGPIOx->OTYPER |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType  << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));//clear
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	685a      	ldr	r2, [r3, #4]
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	799b      	ldrb	r3, [r3, #6]
 8000424:	4619      	mov	r1, r3
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	791b      	ldrb	r3, [r3, #4]
 800042a:	fa01 f303 	lsl.w	r3, r1, r3
 800042e:	4619      	mov	r1, r3
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	430a      	orrs	r2, r1
 8000436:	605a      	str	r2, [r3, #4]


//configure pull up/pull down register
(pGPIOHandle->pGPIOx->PUPDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPDcontrol) <<
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	68da      	ldr	r2, [r3, #12]
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	7a1b      	ldrb	r3, [r3, #8]
 8000442:	4619      	mov	r1, r3
		(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));//set
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	791b      	ldrb	r3, [r3, #4]
 8000448:	005b      	lsls	r3, r3, #1
(pGPIOHandle->pGPIOx->PUPDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPDcontrol) <<
 800044a:	fa01 f303 	lsl.w	r3, r1, r3
 800044e:	4619      	mov	r1, r3
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	430a      	orrs	r2, r1
 8000456:	60da      	str	r2, [r3, #12]



}
 8000458:	bf00      	nop
 800045a:	3714      	adds	r7, #20
 800045c:	46bd      	mov	sp, r7
 800045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000462:	4770      	bx	lr
 8000464:	40013c00 	.word	0x40013c00
 8000468:	40020000 	.word	0x40020000
 800046c:	40020400 	.word	0x40020400
 8000470:	40020800 	.word	0x40020800
 8000474:	40020c00 	.word	0x40020c00
 8000478:	40021000 	.word	0x40021000
 800047c:	40021400 	.word	0x40021400
 8000480:	40021800 	.word	0x40021800
 8000484:	40021c00 	.word	0x40021c00
 8000488:	40022000 	.word	0x40022000
 800048c:	40023800 	.word	0x40023800
 8000490:	40013800 	.word	0x40013800

08000494 <GPIO_WriteToOutputPin>:
	return data;
}

//write data to pin
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx,uint8_t pinNumber, uint8_t value)
{
 8000494:	b480      	push	{r7}
 8000496:	b083      	sub	sp, #12
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
 800049c:	460b      	mov	r3, r1
 800049e:	70fb      	strb	r3, [r7, #3]
 80004a0:	4613      	mov	r3, r2
 80004a2:	70bb      	strb	r3, [r7, #2]
	pGPIOx->ODR |= (value << pinNumber);
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	695b      	ldr	r3, [r3, #20]
 80004a8:	78b9      	ldrb	r1, [r7, #2]
 80004aa:	78fa      	ldrb	r2, [r7, #3]
 80004ac:	fa01 f202 	lsl.w	r2, r1, r2
 80004b0:	431a      	orrs	r2, r3
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	615a      	str	r2, [r3, #20]
}
 80004b6:	bf00      	nop
 80004b8:	370c      	adds	r7, #12
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr
	...

080004c4 <GPIO_IRQInterruptConfig>:

/*
 * IRQ Configuration and ISR handling
 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b085      	sub	sp, #20
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	460a      	mov	r2, r1
 80004ce:	71fb      	strb	r3, [r7, #7]
 80004d0:	4613      	mov	r3, r2
 80004d2:	71bb      	strb	r3, [r7, #6]

	//enable the interrupt handler for respective irq handler
	uint8_t temp1 = IRQNumber / 32;
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	095b      	lsrs	r3, r3, #5
 80004d8:	73fb      	strb	r3, [r7, #15]
	uint8_t temp2 = IRQNumber % 32;
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	f003 031f 	and.w	r3, r3, #31
 80004e0:	73bb      	strb	r3, [r7, #14]

	if(EnorDi == ENABLE){
 80004e2:	79bb      	ldrb	r3, [r7, #6]
 80004e4:	2b01      	cmp	r3, #1
 80004e6:	d10e      	bne.n	8000506 <GPIO_IRQInterruptConfig+0x42>
		NVIC_SET_EN->NVIC_ISER[temp1] |= (0x1 << temp2);
 80004e8:	4a11      	ldr	r2, [pc, #68]	; (8000530 <GPIO_IRQInterruptConfig+0x6c>)
 80004ea:	7bfb      	ldrb	r3, [r7, #15]
 80004ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004f0:	7bbb      	ldrb	r3, [r7, #14]
 80004f2:	2101      	movs	r1, #1
 80004f4:	fa01 f303 	lsl.w	r3, r1, r3
 80004f8:	4618      	mov	r0, r3
 80004fa:	490d      	ldr	r1, [pc, #52]	; (8000530 <GPIO_IRQInterruptConfig+0x6c>)
 80004fc:	7bfb      	ldrb	r3, [r7, #15]
 80004fe:	4302      	orrs	r2, r0
 8000500:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}else{
		NVIC_CLR_EN->NVIC_ICER[temp1] |= (0x1 << temp2);
	}


}
 8000504:	e00d      	b.n	8000522 <GPIO_IRQInterruptConfig+0x5e>
		NVIC_CLR_EN->NVIC_ICER[temp1] |= (0x1 << temp2);
 8000506:	4a0b      	ldr	r2, [pc, #44]	; (8000534 <GPIO_IRQInterruptConfig+0x70>)
 8000508:	7bfb      	ldrb	r3, [r7, #15]
 800050a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800050e:	7bbb      	ldrb	r3, [r7, #14]
 8000510:	2101      	movs	r1, #1
 8000512:	fa01 f303 	lsl.w	r3, r1, r3
 8000516:	4618      	mov	r0, r3
 8000518:	4906      	ldr	r1, [pc, #24]	; (8000534 <GPIO_IRQInterruptConfig+0x70>)
 800051a:	7bfb      	ldrb	r3, [r7, #15]
 800051c:	4302      	orrs	r2, r0
 800051e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000522:	bf00      	nop
 8000524:	3714      	adds	r7, #20
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	e000e100 	.word	0xe000e100
 8000534:	e000e180 	.word	0xe000e180

08000538 <GPIO_IRQHandler>:
	//configure irq Priority
		uint8_t iprReg = IRQNumber / 4;
		uint8_t bitOffset = ((IRQNumber % 4) * 8);
		NVIC_Priority_Set->NVIC_IPR[iprReg] |= (IRQNumber << bitOffset);
}
void GPIO_IRQHandler(uint8_t pinNumber){
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	71fb      	strb	r3, [r7, #7]
	EXTI->PR |= (0x1 << 0);
 8000542:	4b06      	ldr	r3, [pc, #24]	; (800055c <GPIO_IRQHandler+0x24>)
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	4a05      	ldr	r2, [pc, #20]	; (800055c <GPIO_IRQHandler+0x24>)
 8000548:	f043 0301 	orr.w	r3, r3, #1
 800054c:	6153      	str	r3, [r2, #20]
}
 800054e:	bf00      	nop
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	40013c00 	.word	0x40013c00

08000560 <main>:




int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b086      	sub	sp, #24
 8000564:	af00      	add	r7, sp, #0
//configure user button (interrupt trigger)
	GPIO_Handle_t userButton = {0};
 8000566:	f107 030c 	add.w	r3, r7, #12
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
	userButton.pGPIOx = GPIOA;
 8000572:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <main+0x50>)
 8000574:	60fb      	str	r3, [r7, #12]
	userButton.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_RT;
 8000576:	2305      	movs	r3, #5
 8000578:	747b      	strb	r3, [r7, #17]
	userButton.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 800057a:	2300      	movs	r3, #0
 800057c:	743b      	strb	r3, [r7, #16]
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI0, ENABLE);
 800057e:	2101      	movs	r1, #1
 8000580:	2006      	movs	r0, #6
 8000582:	f7ff ff9f 	bl	80004c4 <GPIO_IRQInterruptConfig>
	GPIO_Init(&userButton);
 8000586:	f107 030c 	add.w	r3, r7, #12
 800058a:	4618      	mov	r0, r3
 800058c:	f7ff fe2c 	bl	80001e8 <GPIO_Init>

//configure red led
	GPIO_Handle_t redLed = {0};
 8000590:	463b      	mov	r3, r7
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
	redLed.pGPIOx = GPIOD;
 800059a:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <main+0x54>)
 800059c:	603b      	str	r3, [r7, #0]
	redLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUPUT;
 800059e:	2301      	movs	r3, #1
 80005a0:	717b      	strb	r3, [r7, #5]
	redLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_14;
 80005a2:	230e      	movs	r3, #14
 80005a4:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&redLed);
 80005a6:	463b      	mov	r3, r7
 80005a8:	4618      	mov	r0, r3
 80005aa:	f7ff fe1d 	bl	80001e8 <GPIO_Init>


	while(1);
 80005ae:	e7fe      	b.n	80005ae <main+0x4e>
 80005b0:	40020000 	.word	0x40020000
 80005b4:	40020c00 	.word	0x40020c00

080005b8 <EXTI0_IRQHandler>:



}

void EXTI0_IRQHandler(GPIO_Handle_t handle){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	GPIO_IRQHandler(GPIO_PIN_0);
 80005c4:	2000      	movs	r0, #0
 80005c6:	f7ff ffb7 	bl	8000538 <GPIO_IRQHandler>
	GPIO_WriteToOutputPin(handle.pGPIOx, handle.GPIO_PinConfig.GPIO_PinNumber, ENABLE);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	7a39      	ldrb	r1, [r7, #8]
 80005ce:	2201      	movs	r2, #1
 80005d0:	4618      	mov	r0, r3
 80005d2:	f7ff ff5f 	bl	8000494 <GPIO_WriteToOutputPin>

}
 80005d6:	bf00      	nop
 80005d8:	3710      	adds	r7, #16
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
	...

080005e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005e0:	480d      	ldr	r0, [pc, #52]	; (8000618 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005e2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005e4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005e8:	480c      	ldr	r0, [pc, #48]	; (800061c <LoopForever+0x6>)
  ldr r1, =_edata
 80005ea:	490d      	ldr	r1, [pc, #52]	; (8000620 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005ec:	4a0d      	ldr	r2, [pc, #52]	; (8000624 <LoopForever+0xe>)
  movs r3, #0
 80005ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f0:	e002      	b.n	80005f8 <LoopCopyDataInit>

080005f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005f6:	3304      	adds	r3, #4

080005f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005fc:	d3f9      	bcc.n	80005f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005fe:	4a0a      	ldr	r2, [pc, #40]	; (8000628 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000600:	4c0a      	ldr	r4, [pc, #40]	; (800062c <LoopForever+0x16>)
  movs r3, #0
 8000602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000604:	e001      	b.n	800060a <LoopFillZerobss>

08000606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000608:	3204      	adds	r2, #4

0800060a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800060a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800060c:	d3fb      	bcc.n	8000606 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800060e:	f000 f811 	bl	8000634 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000612:	f7ff ffa5 	bl	8000560 <main>

08000616 <LoopForever>:

LoopForever:
  b LoopForever
 8000616:	e7fe      	b.n	8000616 <LoopForever>
  ldr   r0, =_estack
 8000618:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800061c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000620:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000624:	0800069c 	.word	0x0800069c
  ldr r2, =_sbss
 8000628:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800062c:	2000001c 	.word	0x2000001c

08000630 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000630:	e7fe      	b.n	8000630 <ADC_IRQHandler>
	...

08000634 <__libc_init_array>:
 8000634:	b570      	push	{r4, r5, r6, lr}
 8000636:	4d0d      	ldr	r5, [pc, #52]	; (800066c <__libc_init_array+0x38>)
 8000638:	4c0d      	ldr	r4, [pc, #52]	; (8000670 <__libc_init_array+0x3c>)
 800063a:	1b64      	subs	r4, r4, r5
 800063c:	10a4      	asrs	r4, r4, #2
 800063e:	2600      	movs	r6, #0
 8000640:	42a6      	cmp	r6, r4
 8000642:	d109      	bne.n	8000658 <__libc_init_array+0x24>
 8000644:	4d0b      	ldr	r5, [pc, #44]	; (8000674 <__libc_init_array+0x40>)
 8000646:	4c0c      	ldr	r4, [pc, #48]	; (8000678 <__libc_init_array+0x44>)
 8000648:	f000 f818 	bl	800067c <_init>
 800064c:	1b64      	subs	r4, r4, r5
 800064e:	10a4      	asrs	r4, r4, #2
 8000650:	2600      	movs	r6, #0
 8000652:	42a6      	cmp	r6, r4
 8000654:	d105      	bne.n	8000662 <__libc_init_array+0x2e>
 8000656:	bd70      	pop	{r4, r5, r6, pc}
 8000658:	f855 3b04 	ldr.w	r3, [r5], #4
 800065c:	4798      	blx	r3
 800065e:	3601      	adds	r6, #1
 8000660:	e7ee      	b.n	8000640 <__libc_init_array+0xc>
 8000662:	f855 3b04 	ldr.w	r3, [r5], #4
 8000666:	4798      	blx	r3
 8000668:	3601      	adds	r6, #1
 800066a:	e7f2      	b.n	8000652 <__libc_init_array+0x1e>
 800066c:	08000694 	.word	0x08000694
 8000670:	08000694 	.word	0x08000694
 8000674:	08000694 	.word	0x08000694
 8000678:	08000698 	.word	0x08000698

0800067c <_init>:
 800067c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800067e:	bf00      	nop
 8000680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000682:	bc08      	pop	{r3}
 8000684:	469e      	mov	lr, r3
 8000686:	4770      	bx	lr

08000688 <_fini>:
 8000688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800068a:	bf00      	nop
 800068c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800068e:	bc08      	pop	{r3}
 8000690:	469e      	mov	lr, r3
 8000692:	4770      	bx	lr


stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000090c  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000ab4  08000ab4  00010ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ac4  08000ac4  00010acc  2**0
                  CONTENTS
  4 .ARM          00000000  08000ac4  08000ac4  00010acc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ac4  08000acc  00010acc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ac4  08000ac4  00010ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ac8  08000ac8  00010ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010acc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010acc  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010acc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001188  00000000  00000000  00010afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000437  00000000  00000000  00011c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000108  00000000  00000000  000120c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000d0  00000000  00000000  000121c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003f09  00000000  00000000  00012298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001600  00000000  00000000  000161a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a1b6  00000000  00000000  000177a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00021957  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000344  00000000  00000000  000219a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000a9c 	.word	0x08000a9c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000a9c 	.word	0x08000a9c

080001e8 <SPI_PeriClockControl>:
 *
 *
 */

//Peripheral Clock Setup
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t enordi){
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
 80001f0:	460b      	mov	r3, r1
 80001f2:	70fb      	strb	r3, [r7, #3]
	switch(enordi){
 80001f4:	78fb      	ldrb	r3, [r7, #3]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d02d      	beq.n	8000256 <SPI_PeriClockControl+0x6e>
 80001fa:	2b01      	cmp	r3, #1
 80001fc:	d157      	bne.n	80002ae <SPI_PeriClockControl+0xc6>
	case 1:
		if(pSPIx == SPI1){
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	4a2e      	ldr	r2, [pc, #184]	; (80002bc <SPI_PeriClockControl+0xd4>)
 8000202:	4293      	cmp	r3, r2
 8000204:	d106      	bne.n	8000214 <SPI_PeriClockControl+0x2c>
			SPI1_PCLK_EN;
 8000206:	4b2e      	ldr	r3, [pc, #184]	; (80002c0 <SPI_PeriClockControl+0xd8>)
 8000208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800020a:	4a2d      	ldr	r2, [pc, #180]	; (80002c0 <SPI_PeriClockControl+0xd8>)
 800020c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000210:	6453      	str	r3, [r2, #68]	; 0x44
			break;
 8000212:	e04d      	b.n	80002b0 <SPI_PeriClockControl+0xc8>
		}else if(pSPIx == SPI2){
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	4a2b      	ldr	r2, [pc, #172]	; (80002c4 <SPI_PeriClockControl+0xdc>)
 8000218:	4293      	cmp	r3, r2
 800021a:	d106      	bne.n	800022a <SPI_PeriClockControl+0x42>
			SPI2_PCLK_EN;
 800021c:	4b28      	ldr	r3, [pc, #160]	; (80002c0 <SPI_PeriClockControl+0xd8>)
 800021e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000220:	4a27      	ldr	r2, [pc, #156]	; (80002c0 <SPI_PeriClockControl+0xd8>)
 8000222:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000226:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 8000228:	e042      	b.n	80002b0 <SPI_PeriClockControl+0xc8>
		}else if(pSPIx == SPI3){
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	4a26      	ldr	r2, [pc, #152]	; (80002c8 <SPI_PeriClockControl+0xe0>)
 800022e:	4293      	cmp	r3, r2
 8000230:	d106      	bne.n	8000240 <SPI_PeriClockControl+0x58>
			SPI3_PCLK_EN;
 8000232:	4b23      	ldr	r3, [pc, #140]	; (80002c0 <SPI_PeriClockControl+0xd8>)
 8000234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000236:	4a22      	ldr	r2, [pc, #136]	; (80002c0 <SPI_PeriClockControl+0xd8>)
 8000238:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800023c:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 800023e:	e037      	b.n	80002b0 <SPI_PeriClockControl+0xc8>
		}else if(pSPIx == SPI4){
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	4a22      	ldr	r2, [pc, #136]	; (80002cc <SPI_PeriClockControl+0xe4>)
 8000244:	4293      	cmp	r3, r2
 8000246:	d106      	bne.n	8000256 <SPI_PeriClockControl+0x6e>
			SPI4_PCLK_EN;
 8000248:	4b1d      	ldr	r3, [pc, #116]	; (80002c0 <SPI_PeriClockControl+0xd8>)
 800024a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800024c:	4a1c      	ldr	r2, [pc, #112]	; (80002c0 <SPI_PeriClockControl+0xd8>)
 800024e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000252:	6453      	str	r3, [r2, #68]	; 0x44
			break;
 8000254:	e02c      	b.n	80002b0 <SPI_PeriClockControl+0xc8>
		}
	case 0:
		if(pSPIx == SPI1){
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	4a18      	ldr	r2, [pc, #96]	; (80002bc <SPI_PeriClockControl+0xd4>)
 800025a:	4293      	cmp	r3, r2
 800025c:	d106      	bne.n	800026c <SPI_PeriClockControl+0x84>
			SPI1_PCLK_DI;
 800025e:	4b18      	ldr	r3, [pc, #96]	; (80002c0 <SPI_PeriClockControl+0xd8>)
 8000260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000262:	4a17      	ldr	r2, [pc, #92]	; (80002c0 <SPI_PeriClockControl+0xd8>)
 8000264:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000268:	6453      	str	r3, [r2, #68]	; 0x44
			break;
 800026a:	e021      	b.n	80002b0 <SPI_PeriClockControl+0xc8>
		}else if(pSPIx == SPI2){
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	4a15      	ldr	r2, [pc, #84]	; (80002c4 <SPI_PeriClockControl+0xdc>)
 8000270:	4293      	cmp	r3, r2
 8000272:	d106      	bne.n	8000282 <SPI_PeriClockControl+0x9a>
			SPI2_PCLK_DI;
 8000274:	4b12      	ldr	r3, [pc, #72]	; (80002c0 <SPI_PeriClockControl+0xd8>)
 8000276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000278:	4a11      	ldr	r2, [pc, #68]	; (80002c0 <SPI_PeriClockControl+0xd8>)
 800027a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800027e:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 8000280:	e016      	b.n	80002b0 <SPI_PeriClockControl+0xc8>
		}else if(pSPIx == SPI3){
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	4a10      	ldr	r2, [pc, #64]	; (80002c8 <SPI_PeriClockControl+0xe0>)
 8000286:	4293      	cmp	r3, r2
 8000288:	d106      	bne.n	8000298 <SPI_PeriClockControl+0xb0>
			SPI3_PCLK_DI;
 800028a:	4b0d      	ldr	r3, [pc, #52]	; (80002c0 <SPI_PeriClockControl+0xd8>)
 800028c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800028e:	4a0c      	ldr	r2, [pc, #48]	; (80002c0 <SPI_PeriClockControl+0xd8>)
 8000290:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000294:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 8000296:	e00b      	b.n	80002b0 <SPI_PeriClockControl+0xc8>
		}else if(pSPIx == SPI4){
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	4a0c      	ldr	r2, [pc, #48]	; (80002cc <SPI_PeriClockControl+0xe4>)
 800029c:	4293      	cmp	r3, r2
 800029e:	d106      	bne.n	80002ae <SPI_PeriClockControl+0xc6>
			SPI4_PCLK_DI;
 80002a0:	4b07      	ldr	r3, [pc, #28]	; (80002c0 <SPI_PeriClockControl+0xd8>)
 80002a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002a4:	4a06      	ldr	r2, [pc, #24]	; (80002c0 <SPI_PeriClockControl+0xd8>)
 80002a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80002aa:	6453      	str	r3, [r2, #68]	; 0x44
			break;
 80002ac:	e000      	b.n	80002b0 <SPI_PeriClockControl+0xc8>
		}default:
			break;
 80002ae:	bf00      	nop

	}
}
 80002b0:	bf00      	nop
 80002b2:	370c      	adds	r7, #12
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr
 80002bc:	40013000 	.word	0x40013000
 80002c0:	40023800 	.word	0x40023800
 80002c4:	40003800 	.word	0x40003800
 80002c8:	40003c00 	.word	0x40003c00
 80002cc:	40003400 	.word	0x40003400

080002d0 <SPI_Init>:

//Init & De-Init
void SPI_Init(SPI_Handle_t *pSPIHandler, uint8_t tx_or_rx)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b084      	sub	sp, #16
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
 80002d8:	460b      	mov	r3, r1
 80002da:	70fb      	strb	r3, [r7, #3]
	SPI_PeriClockControl(pSPIHandler->pSPIx, ENABLE);
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	2101      	movs	r1, #1
 80002e2:	4618      	mov	r0, r3
 80002e4:	f7ff ff80 	bl	80001e8 <SPI_PeriClockControl>

	uint32_t tempReg = 0;
 80002e8:	2300      	movs	r3, #0
 80002ea:	60fb      	str	r3, [r7, #12]
	//configure slave/master for device
	tempReg |= (pSPIHandler->SPI_Config.SPI_DEVICEMODE << SPI_CR1_MSTER);
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	7a5b      	ldrb	r3, [r3, #9]
 80002f0:	009b      	lsls	r3, r3, #2
 80002f2:	461a      	mov	r2, r3
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	4313      	orrs	r3, r2
 80002f8:	60fb      	str	r3, [r7, #12]

	//configure baud rate for SPI peripheral
	tempReg |= (pSPIHandler->SPI_Config.SPI_Speed << SPI_CR1_BAUDRATE);
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	799b      	ldrb	r3, [r3, #6]
 80002fe:	00db      	lsls	r3, r3, #3
 8000300:	461a      	mov	r2, r3
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	4313      	orrs	r3, r2
 8000306:	60fb      	str	r3, [r7, #12]

	//configure slave management
	tempReg |= (pSPIHandler->SPI_Config.SPI_SSM << SPI_CR1_SSM);
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	795b      	ldrb	r3, [r3, #5]
 800030c:	025b      	lsls	r3, r3, #9
 800030e:	461a      	mov	r2, r3
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	4313      	orrs	r3, r2
 8000314:	60fb      	str	r3, [r7, #12]

	tempReg |= (pSPIHandler->SPI_Config.SPI_CPOL << SPI_CR1_CPOL);
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	7a1b      	ldrb	r3, [r3, #8]
 800031a:	005b      	lsls	r3, r3, #1
 800031c:	461a      	mov	r2, r3
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	4313      	orrs	r3, r2
 8000322:	60fb      	str	r3, [r7, #12]

	tempReg |= (pSPIHandler->SPI_Config.SPI_CPHA << SPI_CR1_CPHA);
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	79db      	ldrb	r3, [r3, #7]
 8000328:	461a      	mov	r2, r3
 800032a:	68fb      	ldr	r3, [r7, #12]
 800032c:	4313      	orrs	r3, r2
 800032e:	60fb      	str	r3, [r7, #12]

	SPI_busConfig(pSPIHandler, tx_or_rx);
 8000330:	78fb      	ldrb	r3, [r7, #3]
 8000332:	4619      	mov	r1, r3
 8000334:	6878      	ldr	r0, [r7, #4]
 8000336:	f000 f855 	bl	80003e4 <SPI_busConfig>


//input settings into the register
	pSPIHandler->pSPIx->SPI_CR1 = tempReg;
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	68fa      	ldr	r2, [r7, #12]
 8000340:	601a      	str	r2, [r3, #0]

}
 8000342:	bf00      	nop
 8000344:	3710      	adds	r7, #16
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
	...

0800034c <SPI_SendData>:

}

//Send/Receive Data - This is a blocking call
void  SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxbuffer, uint32_t len)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b084      	sub	sp, #16
 8000350:	af00      	add	r7, sp, #0
 8000352:	60f8      	str	r0, [r7, #12]
 8000354:	60b9      	str	r1, [r7, #8]
 8000356:	607a      	str	r2, [r7, #4]
	if(!(RCC->APB1ENR & (ENABLE << 14)))
 8000358:	4b21      	ldr	r3, [pc, #132]	; (80003e0 <SPI_SendData+0x94>)
 800035a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800035c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000360:	2b00      	cmp	r3, #0
 8000362:	d103      	bne.n	800036c <SPI_SendData+0x20>
	{
		SPI_PeriClockControl(pSPIx, ENABLE);
 8000364:	2101      	movs	r1, #1
 8000366:	68f8      	ldr	r0, [r7, #12]
 8000368:	f7ff ff3e 	bl	80001e8 <SPI_PeriClockControl>
	}


	while(!get_reg_value((uint32_t*)pSPIx, SPI_SR_POSITION, SPI_SR_TXE))
 800036c:	bf00      	nop
 800036e:	2201      	movs	r2, #1
 8000370:	2102      	movs	r1, #2
 8000372:	68f8      	ldr	r0, [r7, #12]
 8000374:	f000 f877 	bl	8000466 <get_reg_value>
 8000378:	4603      	mov	r3, r0
 800037a:	f083 0301 	eor.w	r3, r3, #1
 800037e:	b2db      	uxtb	r3, r3
 8000380:	2b00      	cmp	r3, #0
 8000382:	d1f4      	bne.n	800036e <SPI_SendData+0x22>
	{

	}
	while(len > 0)
 8000384:	e021      	b.n	80003ca <SPI_SendData+0x7e>
	{

		//dff set to 16 bit
		if(pSPIx->SPI_CR1 & (SET  << SPI_CR1_DFF))
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800038e:	2b00      	cmp	r3, #0
 8000390:	d00a      	beq.n	80003a8 <SPI_SendData+0x5c>
		{
			pSPIx->SPI_DR = *(uint32_t*)pTxbuffer;
 8000392:	68bb      	ldr	r3, [r7, #8]
 8000394:	681a      	ldr	r2, [r3, #0]
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	60da      	str	r2, [r3, #12]
			len -= 2;
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	3b02      	subs	r3, #2
 800039e:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxbuffer++;
 80003a0:	68bb      	ldr	r3, [r7, #8]
 80003a2:	3301      	adds	r3, #1
 80003a4:	60bb      	str	r3, [r7, #8]
 80003a6:	e010      	b.n	80003ca <SPI_SendData+0x7e>
		}//dff set to 8 bit
		else if(!(pSPIx->SPI_CR1 & (SET << SPI_CR1_DFF)))
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d10a      	bne.n	80003ca <SPI_SendData+0x7e>
		{
			pSPIx->SPI_DR = *pTxbuffer;
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	461a      	mov	r2, r3
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	60da      	str	r2, [r3, #12]
			len--;
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	3b01      	subs	r3, #1
 80003c2:	607b      	str	r3, [r7, #4]
			pTxbuffer++;
 80003c4:	68bb      	ldr	r3, [r7, #8]
 80003c6:	3301      	adds	r3, #1
 80003c8:	60bb      	str	r3, [r7, #8]
	while(len > 0)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d1da      	bne.n	8000386 <SPI_SendData+0x3a>
		}

	}

	SPI_PeriClockControl(pSPIx, DISABLE);
 80003d0:	2100      	movs	r1, #0
 80003d2:	68f8      	ldr	r0, [r7, #12]
 80003d4:	f7ff ff08 	bl	80001e8 <SPI_PeriClockControl>
}
 80003d8:	bf00      	nop
 80003da:	3710      	adds	r7, #16
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	40023800 	.word	0x40023800

080003e4 <SPI_busConfig>:

//use SPI_RX or SPI_TX for tx_or_rx
void SPI_busConfig(SPI_Handle_t *pSPIHandler, uint8_t tx_or_rx)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
 80003ec:	460b      	mov	r3, r1
 80003ee:	70fb      	strb	r3, [r7, #3]
	if(pSPIHandler->SPI_Config.BusConfig == SPI_CONFIG_FD)
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	791b      	ldrb	r3, [r3, #4]
 80003f4:	2b02      	cmp	r3, #2
 80003f6:	d112      	bne.n	800041e <SPI_busConfig+0x3a>
	{	//reset bidimode for 2 line unidirection data
		pSPIHandler->pSPIx->SPI_CR1 |= (RESET << SPI_CR1_BIDI_MODE);
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	681a      	ldr	r2, [r3, #0]
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	6812      	ldr	r2, [r2, #0]
 8000402:	601a      	str	r2, [r3, #0]
		//ensure bidioe is reset not needed for Full duplex
		pSPIHandler->pSPIx->SPI_CR1 |= (RESET << SPI_CR1_BIDI_OE);
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	681a      	ldr	r2, [r3, #0]
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	6812      	ldr	r2, [r2, #0]
 800040e:	601a      	str	r2, [r3, #0]
		//reset rx-only bit
		pSPIHandler->pSPIx->SPI_CR1 |= (RESET << SPI_CR1_RX_ONLY);
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	681a      	ldr	r2, [r3, #0]
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	6812      	ldr	r2, [r2, #0]
 800041a:	601a      	str	r2, [r3, #0]

	}



}
 800041c:	e01d      	b.n	800045a <SPI_busConfig+0x76>
	else if(pSPIHandler->SPI_Config.BusConfig == (uint8_t)SPI_CONFIG_HD || pSPIHandler->SPI_Config.BusConfig == (uint8_t)SPI_SIMPLEX_RX_ONLY)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	791b      	ldrb	r3, [r3, #4]
 8000422:	2b01      	cmp	r3, #1
 8000424:	d003      	beq.n	800042e <SPI_busConfig+0x4a>
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	791b      	ldrb	r3, [r3, #4]
 800042a:	2b03      	cmp	r3, #3
 800042c:	d115      	bne.n	800045a <SPI_busConfig+0x76>
		pSPIHandler->pSPIx->SPI_CR1 |= (SET << SPI_CR1_BIDI_MODE);
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	681a      	ldr	r2, [r3, #0]
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800043c:	601a      	str	r2, [r3, #0]
		pSPIHandler->pSPIx->SPI_CR1 |= (RESET << SPI_CR1_RX_ONLY);
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	681a      	ldr	r2, [r3, #0]
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	6812      	ldr	r2, [r2, #0]
 8000448:	601a      	str	r2, [r3, #0]
		pSPIHandler->pSPIx->SPI_CR1 |= (SET << SPI_CR1_BIDI_OE);
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	681a      	ldr	r2, [r3, #0]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000458:	601a      	str	r2, [r3, #0]
}
 800045a:	bf00      	nop
 800045c:	370c      	adds	r7, #12
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr

08000466 <get_reg_value>:

bool get_reg_value(uint32_t *address, uint32_t spi_register, uint8_t register_bit)
{
 8000466:	b480      	push	{r7}
 8000468:	b085      	sub	sp, #20
 800046a:	af00      	add	r7, sp, #0
 800046c:	60f8      	str	r0, [r7, #12]
 800046e:	60b9      	str	r1, [r7, #8]
 8000470:	4613      	mov	r3, r2
 8000472:	71fb      	strb	r3, [r7, #7]

	if(register_bit > SPI_IS2PR_POSITION)
 8000474:	79fb      	ldrb	r3, [r7, #7]
 8000476:	2b08      	cmp	r3, #8
 8000478:	d901      	bls.n	800047e <get_reg_value+0x18>
	{
		return 0;
 800047a:	2300      	movs	r3, #0
 800047c:	e00e      	b.n	800049c <get_reg_value+0x36>
	}

	if(*(address + (sizeof(uint32_t) * spi_register)) & (1 << register_bit))
 800047e:	68bb      	ldr	r3, [r7, #8]
 8000480:	011b      	lsls	r3, r3, #4
 8000482:	68fa      	ldr	r2, [r7, #12]
 8000484:	4413      	add	r3, r2
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	79fa      	ldrb	r2, [r7, #7]
 800048a:	2101      	movs	r1, #1
 800048c:	fa01 f202 	lsl.w	r2, r1, r2
 8000490:	4013      	ands	r3, r2
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <get_reg_value+0x34>
	{
		return true;
 8000496:	2301      	movs	r3, #1
 8000498:	e000      	b.n	800049c <get_reg_value+0x36>
	}
	else
	{
		return false;
 800049a:	2300      	movs	r3, #0
	}



}
 800049c:	4618      	mov	r0, r3
 800049e:	3714      	adds	r7, #20
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr

080004a8 <GPIO_PeriClockControl>:
 *
 * @Note              -  none
 */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
 80004b0:	460b      	mov	r3, r1
 80004b2:	70fb      	strb	r3, [r7, #3]

if(EnorDi == ENABLE){
 80004b4:	78fb      	ldrb	r3, [r7, #3]
 80004b6:	2b01      	cmp	r3, #1
 80004b8:	f040 80c5 	bne.w	8000646 <GPIO_PeriClockControl+0x19e>
	if(pGPIOx == GPIOA)
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	4a65      	ldr	r2, [pc, #404]	; (8000654 <GPIO_PeriClockControl+0x1ac>)
 80004c0:	4293      	cmp	r3, r2
 80004c2:	d106      	bne.n	80004d2 <GPIO_PeriClockControl+0x2a>
	{
		GPIOA_PCLK_EN;
 80004c4:	4b64      	ldr	r3, [pc, #400]	; (8000658 <GPIO_PeriClockControl+0x1b0>)
 80004c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c8:	4a63      	ldr	r2, [pc, #396]	; (8000658 <GPIO_PeriClockControl+0x1b0>)
 80004ca:	f043 0301 	orr.w	r3, r3, #1
 80004ce:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOI_PCLK_DI;
		}
	}
}

}
 80004d0:	e0b9      	b.n	8000646 <GPIO_PeriClockControl+0x19e>
	else if(pGPIOx == GPIOB)
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	4a61      	ldr	r2, [pc, #388]	; (800065c <GPIO_PeriClockControl+0x1b4>)
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d106      	bne.n	80004e8 <GPIO_PeriClockControl+0x40>
		GPIOB_PCLK_EN;
 80004da:	4b5f      	ldr	r3, [pc, #380]	; (8000658 <GPIO_PeriClockControl+0x1b0>)
 80004dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004de:	4a5e      	ldr	r2, [pc, #376]	; (8000658 <GPIO_PeriClockControl+0x1b0>)
 80004e0:	f043 0302 	orr.w	r3, r3, #2
 80004e4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004e6:	e0ae      	b.n	8000646 <GPIO_PeriClockControl+0x19e>
	else if(pGPIOx == GPIOC)
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	4a5d      	ldr	r2, [pc, #372]	; (8000660 <GPIO_PeriClockControl+0x1b8>)
 80004ec:	4293      	cmp	r3, r2
 80004ee:	d106      	bne.n	80004fe <GPIO_PeriClockControl+0x56>
		GPIOC_PCLK_EN;
 80004f0:	4b59      	ldr	r3, [pc, #356]	; (8000658 <GPIO_PeriClockControl+0x1b0>)
 80004f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f4:	4a58      	ldr	r2, [pc, #352]	; (8000658 <GPIO_PeriClockControl+0x1b0>)
 80004f6:	f043 0304 	orr.w	r3, r3, #4
 80004fa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004fc:	e0a3      	b.n	8000646 <GPIO_PeriClockControl+0x19e>
	else if(pGPIOx == GPIOD)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	4a58      	ldr	r2, [pc, #352]	; (8000664 <GPIO_PeriClockControl+0x1bc>)
 8000502:	4293      	cmp	r3, r2
 8000504:	d106      	bne.n	8000514 <GPIO_PeriClockControl+0x6c>
		GPIOD_PCLK_EN;
 8000506:	4b54      	ldr	r3, [pc, #336]	; (8000658 <GPIO_PeriClockControl+0x1b0>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050a:	4a53      	ldr	r2, [pc, #332]	; (8000658 <GPIO_PeriClockControl+0x1b0>)
 800050c:	f043 0308 	orr.w	r3, r3, #8
 8000510:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000512:	e098      	b.n	8000646 <GPIO_PeriClockControl+0x19e>
	else if(pGPIOx == GPIOE)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	4a54      	ldr	r2, [pc, #336]	; (8000668 <GPIO_PeriClockControl+0x1c0>)
 8000518:	4293      	cmp	r3, r2
 800051a:	d106      	bne.n	800052a <GPIO_PeriClockControl+0x82>
		GPIOE_PCLK_EN;
 800051c:	4b4e      	ldr	r3, [pc, #312]	; (8000658 <GPIO_PeriClockControl+0x1b0>)
 800051e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000520:	4a4d      	ldr	r2, [pc, #308]	; (8000658 <GPIO_PeriClockControl+0x1b0>)
 8000522:	f043 0310 	orr.w	r3, r3, #16
 8000526:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000528:	e08d      	b.n	8000646 <GPIO_PeriClockControl+0x19e>
	else if(pGPIOx == GPIOF)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4a4f      	ldr	r2, [pc, #316]	; (800066c <GPIO_PeriClockControl+0x1c4>)
 800052e:	4293      	cmp	r3, r2
 8000530:	d106      	bne.n	8000540 <GPIO_PeriClockControl+0x98>
		GPIOF_PCLK_EN;
 8000532:	4b49      	ldr	r3, [pc, #292]	; (8000658 <GPIO_PeriClockControl+0x1b0>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	4a48      	ldr	r2, [pc, #288]	; (8000658 <GPIO_PeriClockControl+0x1b0>)
 8000538:	f043 0310 	orr.w	r3, r3, #16
 800053c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800053e:	e082      	b.n	8000646 <GPIO_PeriClockControl+0x19e>
	else if(pGPIOx == GPIOG)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	4a4b      	ldr	r2, [pc, #300]	; (8000670 <GPIO_PeriClockControl+0x1c8>)
 8000544:	4293      	cmp	r3, r2
 8000546:	d106      	bne.n	8000556 <GPIO_PeriClockControl+0xae>
		GPIOG_PCLK_EN;
 8000548:	4b43      	ldr	r3, [pc, #268]	; (8000658 <GPIO_PeriClockControl+0x1b0>)
 800054a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054c:	4a42      	ldr	r2, [pc, #264]	; (8000658 <GPIO_PeriClockControl+0x1b0>)
 800054e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000552:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000554:	e077      	b.n	8000646 <GPIO_PeriClockControl+0x19e>
	else if(pGPIOx == GPIOH)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4a46      	ldr	r2, [pc, #280]	; (8000674 <GPIO_PeriClockControl+0x1cc>)
 800055a:	4293      	cmp	r3, r2
 800055c:	d106      	bne.n	800056c <GPIO_PeriClockControl+0xc4>
		GPIOH_PCLK_EN;
 800055e:	4b3e      	ldr	r3, [pc, #248]	; (8000658 <GPIO_PeriClockControl+0x1b0>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	4a3d      	ldr	r2, [pc, #244]	; (8000658 <GPIO_PeriClockControl+0x1b0>)
 8000564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000568:	6313      	str	r3, [r2, #48]	; 0x30
}
 800056a:	e06c      	b.n	8000646 <GPIO_PeriClockControl+0x19e>
	else if(pGPIOx == GPIOI)
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	4a42      	ldr	r2, [pc, #264]	; (8000678 <GPIO_PeriClockControl+0x1d0>)
 8000570:	4293      	cmp	r3, r2
 8000572:	d106      	bne.n	8000582 <GPIO_PeriClockControl+0xda>
		GPIOI_PCLK_EN;
 8000574:	4b38      	ldr	r3, [pc, #224]	; (8000658 <GPIO_PeriClockControl+0x1b0>)
 8000576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000578:	4a37      	ldr	r2, [pc, #220]	; (8000658 <GPIO_PeriClockControl+0x1b0>)
 800057a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800057e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000580:	e061      	b.n	8000646 <GPIO_PeriClockControl+0x19e>
		if(pGPIOx == GPIOA)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	4a33      	ldr	r2, [pc, #204]	; (8000654 <GPIO_PeriClockControl+0x1ac>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d106      	bne.n	8000598 <GPIO_PeriClockControl+0xf0>
			GPIOA_PCLK_DI;
 800058a:	4b33      	ldr	r3, [pc, #204]	; (8000658 <GPIO_PeriClockControl+0x1b0>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	4a32      	ldr	r2, [pc, #200]	; (8000658 <GPIO_PeriClockControl+0x1b0>)
 8000590:	f023 0301 	bic.w	r3, r3, #1
 8000594:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000596:	e056      	b.n	8000646 <GPIO_PeriClockControl+0x19e>
		else if(pGPIOx == GPIOB)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4a30      	ldr	r2, [pc, #192]	; (800065c <GPIO_PeriClockControl+0x1b4>)
 800059c:	4293      	cmp	r3, r2
 800059e:	d106      	bne.n	80005ae <GPIO_PeriClockControl+0x106>
			GPIOB_PCLK_DI;
 80005a0:	4b2d      	ldr	r3, [pc, #180]	; (8000658 <GPIO_PeriClockControl+0x1b0>)
 80005a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a4:	4a2c      	ldr	r2, [pc, #176]	; (8000658 <GPIO_PeriClockControl+0x1b0>)
 80005a6:	f023 0302 	bic.w	r3, r3, #2
 80005aa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005ac:	e04b      	b.n	8000646 <GPIO_PeriClockControl+0x19e>
		else if(pGPIOx == GPIOC)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	4a2b      	ldr	r2, [pc, #172]	; (8000660 <GPIO_PeriClockControl+0x1b8>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d106      	bne.n	80005c4 <GPIO_PeriClockControl+0x11c>
			GPIOC_PCLK_DI;
 80005b6:	4b28      	ldr	r3, [pc, #160]	; (8000658 <GPIO_PeriClockControl+0x1b0>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	4a27      	ldr	r2, [pc, #156]	; (8000658 <GPIO_PeriClockControl+0x1b0>)
 80005bc:	f023 0304 	bic.w	r3, r3, #4
 80005c0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005c2:	e040      	b.n	8000646 <GPIO_PeriClockControl+0x19e>
		else if(pGPIOx == GPIOD)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	4a27      	ldr	r2, [pc, #156]	; (8000664 <GPIO_PeriClockControl+0x1bc>)
 80005c8:	4293      	cmp	r3, r2
 80005ca:	d106      	bne.n	80005da <GPIO_PeriClockControl+0x132>
			GPIOD_PCLK_DI;
 80005cc:	4b22      	ldr	r3, [pc, #136]	; (8000658 <GPIO_PeriClockControl+0x1b0>)
 80005ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d0:	4a21      	ldr	r2, [pc, #132]	; (8000658 <GPIO_PeriClockControl+0x1b0>)
 80005d2:	f023 0308 	bic.w	r3, r3, #8
 80005d6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005d8:	e035      	b.n	8000646 <GPIO_PeriClockControl+0x19e>
		else if(pGPIOx == GPIOE)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4a22      	ldr	r2, [pc, #136]	; (8000668 <GPIO_PeriClockControl+0x1c0>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d106      	bne.n	80005f0 <GPIO_PeriClockControl+0x148>
			GPIOE_PCLK_DI;
 80005e2:	4b1d      	ldr	r3, [pc, #116]	; (8000658 <GPIO_PeriClockControl+0x1b0>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	4a1c      	ldr	r2, [pc, #112]	; (8000658 <GPIO_PeriClockControl+0x1b0>)
 80005e8:	f023 0310 	bic.w	r3, r3, #16
 80005ec:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005ee:	e02a      	b.n	8000646 <GPIO_PeriClockControl+0x19e>
		else if(pGPIOx == GPIOF)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	4a1e      	ldr	r2, [pc, #120]	; (800066c <GPIO_PeriClockControl+0x1c4>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d106      	bne.n	8000606 <GPIO_PeriClockControl+0x15e>
			GPIOF_PCLK_DI;
 80005f8:	4b17      	ldr	r3, [pc, #92]	; (8000658 <GPIO_PeriClockControl+0x1b0>)
 80005fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fc:	4a16      	ldr	r2, [pc, #88]	; (8000658 <GPIO_PeriClockControl+0x1b0>)
 80005fe:	f023 0310 	bic.w	r3, r3, #16
 8000602:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000604:	e01f      	b.n	8000646 <GPIO_PeriClockControl+0x19e>
		else if(pGPIOx == GPIOG)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4a19      	ldr	r2, [pc, #100]	; (8000670 <GPIO_PeriClockControl+0x1c8>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d106      	bne.n	800061c <GPIO_PeriClockControl+0x174>
			GPIOG_PCLK_DI;
 800060e:	4b12      	ldr	r3, [pc, #72]	; (8000658 <GPIO_PeriClockControl+0x1b0>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	4a11      	ldr	r2, [pc, #68]	; (8000658 <GPIO_PeriClockControl+0x1b0>)
 8000614:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000618:	6313      	str	r3, [r2, #48]	; 0x30
}
 800061a:	e014      	b.n	8000646 <GPIO_PeriClockControl+0x19e>
		else if(pGPIOx == GPIOH)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	4a15      	ldr	r2, [pc, #84]	; (8000674 <GPIO_PeriClockControl+0x1cc>)
 8000620:	4293      	cmp	r3, r2
 8000622:	d106      	bne.n	8000632 <GPIO_PeriClockControl+0x18a>
			GPIOH_PCLK_DI;
 8000624:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <GPIO_PeriClockControl+0x1b0>)
 8000626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000628:	4a0b      	ldr	r2, [pc, #44]	; (8000658 <GPIO_PeriClockControl+0x1b0>)
 800062a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800062e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000630:	e009      	b.n	8000646 <GPIO_PeriClockControl+0x19e>
		else if(pGPIOx == GPIOI)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4a10      	ldr	r2, [pc, #64]	; (8000678 <GPIO_PeriClockControl+0x1d0>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d105      	bne.n	8000646 <GPIO_PeriClockControl+0x19e>
			GPIOI_PCLK_DI;
 800063a:	4b07      	ldr	r3, [pc, #28]	; (8000658 <GPIO_PeriClockControl+0x1b0>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a06      	ldr	r2, [pc, #24]	; (8000658 <GPIO_PeriClockControl+0x1b0>)
 8000640:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	40020000 	.word	0x40020000
 8000658:	40023800 	.word	0x40023800
 800065c:	40020400 	.word	0x40020400
 8000660:	40020800 	.word	0x40020800
 8000664:	40020c00 	.word	0x40020c00
 8000668:	40021000 	.word	0x40021000
 800066c:	40021400 	.word	0x40021400
 8000670:	40021800 	.word	0x40021800
 8000674:	40021c00 	.word	0x40021c00
 8000678:	40022000 	.word	0x40022000

0800067c <GPIO_Init>:

/*
 *  Init - Deinit
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]

GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2101      	movs	r1, #1
 800068a:	4618      	mov	r0, r3
 800068c:	f7ff ff0c 	bl	80004a8 <GPIO_PeriClockControl>

//Configure pin mode

//if interrupt is true
if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode < GPIO_MODE_IT_FT){
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	795b      	ldrb	r3, [r3, #5]
 8000694:	2b03      	cmp	r3, #3
 8000696:	d810      	bhi.n	80006ba <GPIO_Init+0x3e>

	pGPIOHandle->pGPIOx->MODER |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <<
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	681a      	ldr	r2, [r3, #0]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	795b      	ldrb	r3, [r3, #5]
 80006a2:	4619      	mov	r1, r3
			(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	791b      	ldrb	r3, [r3, #4]
 80006a8:	005b      	lsls	r3, r3, #1
	pGPIOHandle->pGPIOx->MODER |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <<
 80006aa:	fa01 f303 	lsl.w	r3, r1, r3
 80006ae:	4619      	mov	r1, r3
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	430a      	orrs	r2, r1
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	e0c4      	b.n	8000844 <GPIO_Init+0x1c8>

}else{

	//configure pin mode
	pGPIOHandle->pGPIOx->MODER |= (GPIO_MODE_INPUT << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	6812      	ldr	r2, [r2, #0]
 80006c4:	601a      	str	r2, [r3, #0]

	//configure pin for desired interrupt trigger type
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	795b      	ldrb	r3, [r3, #5]
 80006ca:	2b04      	cmp	r3, #4
 80006cc:	d117      	bne.n	80006fe <GPIO_Init+0x82>


		//configure falling edge
		EXTI->FTRS |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006ce:	4b8c      	ldr	r3, [pc, #560]	; (8000900 <GPIO_Init+0x284>)
 80006d0:	68db      	ldr	r3, [r3, #12]
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	7912      	ldrb	r2, [r2, #4]
 80006d6:	4611      	mov	r1, r2
 80006d8:	2201      	movs	r2, #1
 80006da:	408a      	lsls	r2, r1
 80006dc:	4611      	mov	r1, r2
 80006de:	4a88      	ldr	r2, [pc, #544]	; (8000900 <GPIO_Init+0x284>)
 80006e0:	430b      	orrs	r3, r1
 80006e2:	60d3      	str	r3, [r2, #12]
		//make sure that rising edge is clear
		EXTI->RTSR &= ~ (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006e4:	4b86      	ldr	r3, [pc, #536]	; (8000900 <GPIO_Init+0x284>)
 80006e6:	689b      	ldr	r3, [r3, #8]
 80006e8:	687a      	ldr	r2, [r7, #4]
 80006ea:	7912      	ldrb	r2, [r2, #4]
 80006ec:	4611      	mov	r1, r2
 80006ee:	2201      	movs	r2, #1
 80006f0:	408a      	lsls	r2, r1
 80006f2:	43d2      	mvns	r2, r2
 80006f4:	4611      	mov	r1, r2
 80006f6:	4a82      	ldr	r2, [pc, #520]	; (8000900 <GPIO_Init+0x284>)
 80006f8:	400b      	ands	r3, r1
 80006fa:	6093      	str	r3, [r2, #8]
 80006fc:	e035      	b.n	800076a <GPIO_Init+0xee>

	}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	795b      	ldrb	r3, [r3, #5]
 8000702:	2b05      	cmp	r3, #5
 8000704:	d117      	bne.n	8000736 <GPIO_Init+0xba>
		//configure for rising edge
		EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000706:	4b7e      	ldr	r3, [pc, #504]	; (8000900 <GPIO_Init+0x284>)
 8000708:	689b      	ldr	r3, [r3, #8]
 800070a:	687a      	ldr	r2, [r7, #4]
 800070c:	7912      	ldrb	r2, [r2, #4]
 800070e:	4611      	mov	r1, r2
 8000710:	2201      	movs	r2, #1
 8000712:	408a      	lsls	r2, r1
 8000714:	4611      	mov	r1, r2
 8000716:	4a7a      	ldr	r2, [pc, #488]	; (8000900 <GPIO_Init+0x284>)
 8000718:	430b      	orrs	r3, r1
 800071a:	6093      	str	r3, [r2, #8]
		//make sure falling edge is clear
		EXTI->FTRS &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800071c:	4b78      	ldr	r3, [pc, #480]	; (8000900 <GPIO_Init+0x284>)
 800071e:	68db      	ldr	r3, [r3, #12]
 8000720:	687a      	ldr	r2, [r7, #4]
 8000722:	7912      	ldrb	r2, [r2, #4]
 8000724:	4611      	mov	r1, r2
 8000726:	2201      	movs	r2, #1
 8000728:	408a      	lsls	r2, r1
 800072a:	43d2      	mvns	r2, r2
 800072c:	4611      	mov	r1, r2
 800072e:	4a74      	ldr	r2, [pc, #464]	; (8000900 <GPIO_Init+0x284>)
 8000730:	400b      	ands	r3, r1
 8000732:	60d3      	str	r3, [r2, #12]
 8000734:	e019      	b.n	800076a <GPIO_Init+0xee>

	}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	795b      	ldrb	r3, [r3, #5]
 800073a:	2b06      	cmp	r3, #6
 800073c:	d115      	bne.n	800076a <GPIO_Init+0xee>
		//configure rising & falling edge
		EXTI->FTRS |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800073e:	4b70      	ldr	r3, [pc, #448]	; (8000900 <GPIO_Init+0x284>)
 8000740:	68db      	ldr	r3, [r3, #12]
 8000742:	687a      	ldr	r2, [r7, #4]
 8000744:	7912      	ldrb	r2, [r2, #4]
 8000746:	4611      	mov	r1, r2
 8000748:	2201      	movs	r2, #1
 800074a:	408a      	lsls	r2, r1
 800074c:	4611      	mov	r1, r2
 800074e:	4a6c      	ldr	r2, [pc, #432]	; (8000900 <GPIO_Init+0x284>)
 8000750:	430b      	orrs	r3, r1
 8000752:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000754:	4b6a      	ldr	r3, [pc, #424]	; (8000900 <GPIO_Init+0x284>)
 8000756:	689b      	ldr	r3, [r3, #8]
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	7912      	ldrb	r2, [r2, #4]
 800075c:	4611      	mov	r1, r2
 800075e:	2201      	movs	r2, #1
 8000760:	408a      	lsls	r2, r1
 8000762:	4611      	mov	r1, r2
 8000764:	4a66      	ldr	r2, [pc, #408]	; (8000900 <GPIO_Init+0x284>)
 8000766:	430b      	orrs	r3, r1
 8000768:	6093      	str	r3, [r2, #8]

	}

	//enable the interrupt over that pin/port + enable pclk for syscfg
	uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	791b      	ldrb	r3, [r3, #4]
 800076e:	089b      	lsrs	r3, r3, #2
 8000770:	73fb      	strb	r3, [r7, #15]
	uint8_t temp2 = (4 *(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4) );
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	791b      	ldrb	r3, [r3, #4]
 8000776:	f003 0303 	and.w	r3, r3, #3
 800077a:	b2db      	uxtb	r3, r3
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	73bb      	strb	r3, [r7, #14]
	uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a5f      	ldr	r2, [pc, #380]	; (8000904 <GPIO_Init+0x288>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d039      	beq.n	80007fe <GPIO_Init+0x182>
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a5e      	ldr	r2, [pc, #376]	; (8000908 <GPIO_Init+0x28c>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d032      	beq.n	80007fa <GPIO_Init+0x17e>
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a5c      	ldr	r2, [pc, #368]	; (800090c <GPIO_Init+0x290>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d02b      	beq.n	80007f6 <GPIO_Init+0x17a>
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a5b      	ldr	r2, [pc, #364]	; (8000910 <GPIO_Init+0x294>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d024      	beq.n	80007f2 <GPIO_Init+0x176>
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a59      	ldr	r2, [pc, #356]	; (8000914 <GPIO_Init+0x298>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d01d      	beq.n	80007ee <GPIO_Init+0x172>
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a58      	ldr	r2, [pc, #352]	; (8000918 <GPIO_Init+0x29c>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d016      	beq.n	80007ea <GPIO_Init+0x16e>
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a56      	ldr	r2, [pc, #344]	; (800091c <GPIO_Init+0x2a0>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d00f      	beq.n	80007e6 <GPIO_Init+0x16a>
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4a55      	ldr	r2, [pc, #340]	; (8000920 <GPIO_Init+0x2a4>)
 80007cc:	4293      	cmp	r3, r2
 80007ce:	d008      	beq.n	80007e2 <GPIO_Init+0x166>
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a53      	ldr	r2, [pc, #332]	; (8000924 <GPIO_Init+0x2a8>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d101      	bne.n	80007de <GPIO_Init+0x162>
 80007da:	2308      	movs	r3, #8
 80007dc:	e010      	b.n	8000800 <GPIO_Init+0x184>
 80007de:	2300      	movs	r3, #0
 80007e0:	e00e      	b.n	8000800 <GPIO_Init+0x184>
 80007e2:	2307      	movs	r3, #7
 80007e4:	e00c      	b.n	8000800 <GPIO_Init+0x184>
 80007e6:	2306      	movs	r3, #6
 80007e8:	e00a      	b.n	8000800 <GPIO_Init+0x184>
 80007ea:	2305      	movs	r3, #5
 80007ec:	e008      	b.n	8000800 <GPIO_Init+0x184>
 80007ee:	2304      	movs	r3, #4
 80007f0:	e006      	b.n	8000800 <GPIO_Init+0x184>
 80007f2:	2303      	movs	r3, #3
 80007f4:	e004      	b.n	8000800 <GPIO_Init+0x184>
 80007f6:	2302      	movs	r3, #2
 80007f8:	e002      	b.n	8000800 <GPIO_Init+0x184>
 80007fa:	2301      	movs	r3, #1
 80007fc:	e000      	b.n	8000800 <GPIO_Init+0x184>
 80007fe:	2300      	movs	r3, #0
 8000800:	737b      	strb	r3, [r7, #13]
	SYSCFG_PCLK_EN;
 8000802:	4b49      	ldr	r3, [pc, #292]	; (8000928 <GPIO_Init+0x2ac>)
 8000804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000806:	4a48      	ldr	r2, [pc, #288]	; (8000928 <GPIO_Init+0x2ac>)
 8000808:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800080c:	6453      	str	r3, [r2, #68]	; 0x44
	SYSCFG->EXTICR[temp1] |= (portCode << temp2);
 800080e:	4a47      	ldr	r2, [pc, #284]	; (800092c <GPIO_Init+0x2b0>)
 8000810:	7bfb      	ldrb	r3, [r7, #15]
 8000812:	3302      	adds	r3, #2
 8000814:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000818:	7b79      	ldrb	r1, [r7, #13]
 800081a:	7bbb      	ldrb	r3, [r7, #14]
 800081c:	fa01 f303 	lsl.w	r3, r1, r3
 8000820:	4618      	mov	r0, r3
 8000822:	4942      	ldr	r1, [pc, #264]	; (800092c <GPIO_Init+0x2b0>)
 8000824:	7bfb      	ldrb	r3, [r7, #15]
 8000826:	4302      	orrs	r2, r0
 8000828:	3302      	adds	r3, #2
 800082a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//enable exti interrupt using imr
	EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800082e:	4b34      	ldr	r3, [pc, #208]	; (8000900 <GPIO_Init+0x284>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	687a      	ldr	r2, [r7, #4]
 8000834:	7912      	ldrb	r2, [r2, #4]
 8000836:	4611      	mov	r1, r2
 8000838:	2201      	movs	r2, #1
 800083a:	408a      	lsls	r2, r1
 800083c:	4611      	mov	r1, r2
 800083e:	4a30      	ldr	r2, [pc, #192]	; (8000900 <GPIO_Init+0x284>)
 8000840:	430b      	orrs	r3, r1
 8000842:	6013      	str	r3, [r2, #0]


}

//configure pin speed
pGPIOHandle->pGPIOx->OSPEEDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed <<
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	689a      	ldr	r2, [r3, #8]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	79db      	ldrb	r3, [r3, #7]
 800084e:	4619      	mov	r1, r3
		(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	791b      	ldrb	r3, [r3, #4]
 8000854:	005b      	lsls	r3, r3, #1
pGPIOHandle->pGPIOx->OSPEEDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed <<
 8000856:	fa01 f303 	lsl.w	r3, r1, r3
 800085a:	4619      	mov	r1, r3
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	430a      	orrs	r2, r1
 8000862:	609a      	str	r2, [r3, #8]

//Configure Alt Function Mode

if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	795b      	ldrb	r3, [r3, #5]
 8000868:	2b02      	cmp	r3, #2
 800086a:	d126      	bne.n	80008ba <GPIO_Init+0x23e>
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber > 7){
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	791b      	ldrb	r3, [r3, #4]
 8000870:	2b07      	cmp	r3, #7
 8000872:	d912      	bls.n	800089a <GPIO_Init+0x21e>
		pGPIOHandle->pGPIOx->AFRH |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode <<
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	7a5b      	ldrb	r3, [r3, #9]
 800087e:	4619      	mov	r1, r3
				(4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8)));
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	791b      	ldrb	r3, [r3, #4]
 8000884:	f003 0307 	and.w	r3, r3, #7
 8000888:	009b      	lsls	r3, r3, #2
		pGPIOHandle->pGPIOx->AFRH |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode <<
 800088a:	fa01 f303 	lsl.w	r3, r1, r3
 800088e:	4619      	mov	r1, r3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	430a      	orrs	r2, r1
 8000896:	625a      	str	r2, [r3, #36]	; 0x24
 8000898:	e00f      	b.n	80008ba <GPIO_Init+0x23e>

	}else{
		pGPIOHandle->pGPIOx->AFRL |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode <<
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	6a1a      	ldr	r2, [r3, #32]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	7a5b      	ldrb	r3, [r3, #9]
 80008a4:	4619      	mov	r1, r3
						(4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	791b      	ldrb	r3, [r3, #4]
 80008aa:	009b      	lsls	r3, r3, #2
		pGPIOHandle->pGPIOx->AFRL |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode <<
 80008ac:	fa01 f303 	lsl.w	r3, r1, r3
 80008b0:	4619      	mov	r1, r3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	430a      	orrs	r2, r1
 80008b8:	621a      	str	r2, [r3, #32]

}


//Configure open drain/push pull
(pGPIOHandle->pGPIOx->OTYPER |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType  << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));//clear
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	685a      	ldr	r2, [r3, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	799b      	ldrb	r3, [r3, #6]
 80008c4:	4619      	mov	r1, r3
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	791b      	ldrb	r3, [r3, #4]
 80008ca:	fa01 f303 	lsl.w	r3, r1, r3
 80008ce:	4619      	mov	r1, r3
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	430a      	orrs	r2, r1
 80008d6:	605a      	str	r2, [r3, #4]


//configure pull up/pull down register
(pGPIOHandle->pGPIOx->PUPDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPDcontrol) <<
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	68da      	ldr	r2, [r3, #12]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	7a1b      	ldrb	r3, [r3, #8]
 80008e2:	4619      	mov	r1, r3
		(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));//set
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	791b      	ldrb	r3, [r3, #4]
 80008e8:	005b      	lsls	r3, r3, #1
(pGPIOHandle->pGPIOx->PUPDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPDcontrol) <<
 80008ea:	fa01 f303 	lsl.w	r3, r1, r3
 80008ee:	4619      	mov	r1, r3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	430a      	orrs	r2, r1
 80008f6:	60da      	str	r2, [r3, #12]



}
 80008f8:	bf00      	nop
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40013c00 	.word	0x40013c00
 8000904:	40020000 	.word	0x40020000
 8000908:	40020400 	.word	0x40020400
 800090c:	40020800 	.word	0x40020800
 8000910:	40020c00 	.word	0x40020c00
 8000914:	40021000 	.word	0x40021000
 8000918:	40021400 	.word	0x40021400
 800091c:	40021800 	.word	0x40021800
 8000920:	40021c00 	.word	0x40021c00
 8000924:	40022000 	.word	0x40022000
 8000928:	40023800 	.word	0x40023800
 800092c:	40013800 	.word	0x40013800

08000930 <spi_config>:
#include "stm32f4xx.h"
#include <stdio.h>
#include <string.h>

void spi_config(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
	SPI_Handle_t SPIx = {0};
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
	//configure pin for spi2
	SPIx.pSPIx = SPI2;
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <spi_config+0x44>)
 8000942:	607b      	str	r3, [r7, #4]
	SPIx.SPI_Config.BusConfig = SPI_CONFIG_FD;
 8000944:	2302      	movs	r3, #2
 8000946:	723b      	strb	r3, [r7, #8]
	SPIx.SPI_Config.SPI_CPOL = IDLE_LOW;
 8000948:	2300      	movs	r3, #0
 800094a:	733b      	strb	r3, [r7, #12]
	SPIx.SPI_Config.SPI_CPHA = LEADING_EDGE;
 800094c:	2300      	movs	r3, #0
 800094e:	72fb      	strb	r3, [r7, #11]
	SPIx.SPI_Config.SPI_DEVICEMODE = SPI_MASTER;
 8000950:	2301      	movs	r3, #1
 8000952:	737b      	strb	r3, [r7, #13]
	SPIx.SPI_Config.SPI_SSM = SPI_SW_SSM;
 8000954:	2300      	movs	r3, #0
 8000956:	727b      	strb	r3, [r7, #9]
	SPIx.SPI_Config.SPI_DFF = DFF_8BIT;
 8000958:	2300      	movs	r3, #0
 800095a:	73bb      	strb	r3, [r7, #14]
	SPIx.SPI_Config.SPI_Speed = DIVISOR_2;
 800095c:	2300      	movs	r3, #0
 800095e:	72bb      	strb	r3, [r7, #10]

	SPI_Init(&SPIx, SPI_RX);
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	2100      	movs	r1, #0
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff fcb3 	bl	80002d0 <SPI_Init>



}
 800096a:	bf00      	nop
 800096c:	3710      	adds	r7, #16
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40003800 	.word	0x40003800

08000978 <spi_pin_config>:

void spi_pin_config(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
	//setup MOSI pin
	GPIO_Handle_t gpiox = {0};
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
	gpiox.pGPIOx = GPIOB;
 8000988:	4b0d      	ldr	r3, [pc, #52]	; (80009c0 <spi_pin_config+0x48>)
 800098a:	607b      	str	r3, [r7, #4]
	gpiox.GPIO_PinConfig.GPIO_PinAltFunMode = GPIO_AF5;
 800098c:	2305      	movs	r3, #5
 800098e:	737b      	strb	r3, [r7, #13]
	gpiox.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUPUT;
 8000990:	2301      	movs	r3, #1
 8000992:	727b      	strb	r3, [r7, #9]
	gpiox.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_15;
 8000994:	230f      	movs	r3, #15
 8000996:	723b      	strb	r3, [r7, #8]
	gpiox.GPIO_PinConfig.GPIO_PinPuPDcontrol = GPIO_NO_PUPD;
 8000998:	2300      	movs	r3, #0
 800099a:	733b      	strb	r3, [r7, #12]
	gpiox.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800099c:	2300      	movs	r3, #0
 800099e:	72bb      	strb	r3, [r7, #10]
	gpiox.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 80009a0:	2302      	movs	r3, #2
 80009a2:	72fb      	strb	r3, [r7, #11]
	GPIO_Init(&gpiox);
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff fe68 	bl	800067c <GPIO_Init>

	gpiox.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 80009ac:	230d      	movs	r3, #13
 80009ae:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&gpiox);
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff fe62 	bl	800067c <GPIO_Init>

}
 80009b8:	bf00      	nop
 80009ba:	3710      	adds	r7, #16
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40020400 	.word	0x40020400

080009c4 <main>:


int main(void)
{
 80009c4:	b590      	push	{r4, r7, lr}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
	//data to send
	char name[] = "Shane Griffith";
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <main+0x34>)
 80009cc:	463c      	mov	r4, r7
 80009ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009d0:	c407      	stmia	r4!, {r0, r1, r2}
 80009d2:	8023      	strh	r3, [r4, #0]
 80009d4:	3402      	adds	r4, #2
 80009d6:	0c1b      	lsrs	r3, r3, #16
 80009d8:	7023      	strb	r3, [r4, #0]

	spi_config();
 80009da:	f7ff ffa9 	bl	8000930 <spi_config>
	spi_pin_config();
 80009de:	f7ff ffcb 	bl	8000978 <spi_pin_config>

	SPI_SendData(SPI2, (uint8_t*)name, sizeof(name));
 80009e2:	463b      	mov	r3, r7
 80009e4:	220f      	movs	r2, #15
 80009e6:	4619      	mov	r1, r3
 80009e8:	4804      	ldr	r0, [pc, #16]	; (80009fc <main+0x38>)
 80009ea:	f7ff fcaf 	bl	800034c <SPI_SendData>
 80009ee:	2300      	movs	r3, #0


}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3714      	adds	r7, #20
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd90      	pop	{r4, r7, pc}
 80009f8:	08000ab4 	.word	0x08000ab4
 80009fc:	40003800 	.word	0x40003800

08000a00 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a00:	480d      	ldr	r0, [pc, #52]	; (8000a38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a02:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a04:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a08:	480c      	ldr	r0, [pc, #48]	; (8000a3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a0a:	490d      	ldr	r1, [pc, #52]	; (8000a40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a0c:	4a0d      	ldr	r2, [pc, #52]	; (8000a44 <LoopForever+0xe>)
  movs r3, #0
 8000a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a10:	e002      	b.n	8000a18 <LoopCopyDataInit>

08000a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a16:	3304      	adds	r3, #4

08000a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a1c:	d3f9      	bcc.n	8000a12 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a1e:	4a0a      	ldr	r2, [pc, #40]	; (8000a48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a20:	4c0a      	ldr	r4, [pc, #40]	; (8000a4c <LoopForever+0x16>)
  movs r3, #0
 8000a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a24:	e001      	b.n	8000a2a <LoopFillZerobss>

08000a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a28:	3204      	adds	r2, #4

08000a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a2c:	d3fb      	bcc.n	8000a26 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a2e:	f000 f811 	bl	8000a54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a32:	f7ff ffc7 	bl	80009c4 <main>

08000a36 <LoopForever>:

LoopForever:
  b LoopForever
 8000a36:	e7fe      	b.n	8000a36 <LoopForever>
  ldr   r0, =_estack
 8000a38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a40:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000a44:	08000acc 	.word	0x08000acc
  ldr r2, =_sbss
 8000a48:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000a4c:	2000001c 	.word	0x2000001c

08000a50 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a50:	e7fe      	b.n	8000a50 <ADC_IRQHandler>
	...

08000a54 <__libc_init_array>:
 8000a54:	b570      	push	{r4, r5, r6, lr}
 8000a56:	4d0d      	ldr	r5, [pc, #52]	; (8000a8c <__libc_init_array+0x38>)
 8000a58:	4c0d      	ldr	r4, [pc, #52]	; (8000a90 <__libc_init_array+0x3c>)
 8000a5a:	1b64      	subs	r4, r4, r5
 8000a5c:	10a4      	asrs	r4, r4, #2
 8000a5e:	2600      	movs	r6, #0
 8000a60:	42a6      	cmp	r6, r4
 8000a62:	d109      	bne.n	8000a78 <__libc_init_array+0x24>
 8000a64:	4d0b      	ldr	r5, [pc, #44]	; (8000a94 <__libc_init_array+0x40>)
 8000a66:	4c0c      	ldr	r4, [pc, #48]	; (8000a98 <__libc_init_array+0x44>)
 8000a68:	f000 f818 	bl	8000a9c <_init>
 8000a6c:	1b64      	subs	r4, r4, r5
 8000a6e:	10a4      	asrs	r4, r4, #2
 8000a70:	2600      	movs	r6, #0
 8000a72:	42a6      	cmp	r6, r4
 8000a74:	d105      	bne.n	8000a82 <__libc_init_array+0x2e>
 8000a76:	bd70      	pop	{r4, r5, r6, pc}
 8000a78:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a7c:	4798      	blx	r3
 8000a7e:	3601      	adds	r6, #1
 8000a80:	e7ee      	b.n	8000a60 <__libc_init_array+0xc>
 8000a82:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a86:	4798      	blx	r3
 8000a88:	3601      	adds	r6, #1
 8000a8a:	e7f2      	b.n	8000a72 <__libc_init_array+0x1e>
 8000a8c:	08000ac4 	.word	0x08000ac4
 8000a90:	08000ac4 	.word	0x08000ac4
 8000a94:	08000ac4 	.word	0x08000ac4
 8000a98:	08000ac8 	.word	0x08000ac8

08000a9c <_init>:
 8000a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a9e:	bf00      	nop
 8000aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aa2:	bc08      	pop	{r3}
 8000aa4:	469e      	mov	lr, r3
 8000aa6:	4770      	bx	lr

08000aa8 <_fini>:
 8000aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aaa:	bf00      	nop
 8000aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aae:	bc08      	pop	{r3}
 8000ab0:	469e      	mov	lr, r3
 8000ab2:	4770      	bx	lr

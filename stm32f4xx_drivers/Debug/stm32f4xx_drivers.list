
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a18  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000bc0  08000bc0  00010bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000bd0  08000bd0  00010bd8  2**0
                  CONTENTS
  4 .ARM          00000000  08000bd0  08000bd0  00010bd8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000bd0  08000bd8  00010bd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000bd0  08000bd0  00010bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000bd4  08000bd4  00010bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010bd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010bd8  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010bd8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001334  00000000  00000000  00010c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000046b  00000000  00000000  00011f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000138  00000000  00000000  000123a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000100  00000000  00000000  000124e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003f09  00000000  00000000  000125e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001710  00000000  00000000  000164e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a257  00000000  00000000  00017bf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00021e50  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000041c  00000000  00000000  00021ea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000ba8 	.word	0x08000ba8

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000ba8 	.word	0x08000ba8

080001e8 <SPI_PeriClockControl>:
 *
 *
 */

//Peripheral Clock Setup
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t enordi){
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
 80001f0:	460b      	mov	r3, r1
 80001f2:	70fb      	strb	r3, [r7, #3]
	switch(enordi){
 80001f4:	78fb      	ldrb	r3, [r7, #3]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d02d      	beq.n	8000256 <SPI_PeriClockControl+0x6e>
 80001fa:	2b01      	cmp	r3, #1
 80001fc:	d157      	bne.n	80002ae <SPI_PeriClockControl+0xc6>
	case 1:
		if(pSPIx == SPI1){
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	4a2e      	ldr	r2, [pc, #184]	; (80002bc <SPI_PeriClockControl+0xd4>)
 8000202:	4293      	cmp	r3, r2
 8000204:	d106      	bne.n	8000214 <SPI_PeriClockControl+0x2c>
			SPI1_PCLK_EN;
 8000206:	4b2e      	ldr	r3, [pc, #184]	; (80002c0 <SPI_PeriClockControl+0xd8>)
 8000208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800020a:	4a2d      	ldr	r2, [pc, #180]	; (80002c0 <SPI_PeriClockControl+0xd8>)
 800020c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000210:	6453      	str	r3, [r2, #68]	; 0x44
			break;
 8000212:	e04d      	b.n	80002b0 <SPI_PeriClockControl+0xc8>
		}else if(pSPIx == SPI2){
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	4a2b      	ldr	r2, [pc, #172]	; (80002c4 <SPI_PeriClockControl+0xdc>)
 8000218:	4293      	cmp	r3, r2
 800021a:	d106      	bne.n	800022a <SPI_PeriClockControl+0x42>
			SPI2_PCLK_EN;
 800021c:	4b28      	ldr	r3, [pc, #160]	; (80002c0 <SPI_PeriClockControl+0xd8>)
 800021e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000220:	4a27      	ldr	r2, [pc, #156]	; (80002c0 <SPI_PeriClockControl+0xd8>)
 8000222:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000226:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 8000228:	e042      	b.n	80002b0 <SPI_PeriClockControl+0xc8>
		}else if(pSPIx == SPI3){
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	4a26      	ldr	r2, [pc, #152]	; (80002c8 <SPI_PeriClockControl+0xe0>)
 800022e:	4293      	cmp	r3, r2
 8000230:	d106      	bne.n	8000240 <SPI_PeriClockControl+0x58>
			SPI3_PCLK_EN;
 8000232:	4b23      	ldr	r3, [pc, #140]	; (80002c0 <SPI_PeriClockControl+0xd8>)
 8000234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000236:	4a22      	ldr	r2, [pc, #136]	; (80002c0 <SPI_PeriClockControl+0xd8>)
 8000238:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800023c:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 800023e:	e037      	b.n	80002b0 <SPI_PeriClockControl+0xc8>
		}else if(pSPIx == SPI4){
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	4a22      	ldr	r2, [pc, #136]	; (80002cc <SPI_PeriClockControl+0xe4>)
 8000244:	4293      	cmp	r3, r2
 8000246:	d106      	bne.n	8000256 <SPI_PeriClockControl+0x6e>
			SPI4_PCLK_EN;
 8000248:	4b1d      	ldr	r3, [pc, #116]	; (80002c0 <SPI_PeriClockControl+0xd8>)
 800024a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800024c:	4a1c      	ldr	r2, [pc, #112]	; (80002c0 <SPI_PeriClockControl+0xd8>)
 800024e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000252:	6453      	str	r3, [r2, #68]	; 0x44
			break;
 8000254:	e02c      	b.n	80002b0 <SPI_PeriClockControl+0xc8>
		}
	case 0:
		if(pSPIx == SPI1){
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	4a18      	ldr	r2, [pc, #96]	; (80002bc <SPI_PeriClockControl+0xd4>)
 800025a:	4293      	cmp	r3, r2
 800025c:	d106      	bne.n	800026c <SPI_PeriClockControl+0x84>
			SPI1_PCLK_DI;
 800025e:	4b18      	ldr	r3, [pc, #96]	; (80002c0 <SPI_PeriClockControl+0xd8>)
 8000260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000262:	4a17      	ldr	r2, [pc, #92]	; (80002c0 <SPI_PeriClockControl+0xd8>)
 8000264:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000268:	6453      	str	r3, [r2, #68]	; 0x44
			break;
 800026a:	e021      	b.n	80002b0 <SPI_PeriClockControl+0xc8>
		}else if(pSPIx == SPI2){
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	4a15      	ldr	r2, [pc, #84]	; (80002c4 <SPI_PeriClockControl+0xdc>)
 8000270:	4293      	cmp	r3, r2
 8000272:	d106      	bne.n	8000282 <SPI_PeriClockControl+0x9a>
			SPI2_PCLK_DI;
 8000274:	4b12      	ldr	r3, [pc, #72]	; (80002c0 <SPI_PeriClockControl+0xd8>)
 8000276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000278:	4a11      	ldr	r2, [pc, #68]	; (80002c0 <SPI_PeriClockControl+0xd8>)
 800027a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800027e:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 8000280:	e016      	b.n	80002b0 <SPI_PeriClockControl+0xc8>
		}else if(pSPIx == SPI3){
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	4a10      	ldr	r2, [pc, #64]	; (80002c8 <SPI_PeriClockControl+0xe0>)
 8000286:	4293      	cmp	r3, r2
 8000288:	d106      	bne.n	8000298 <SPI_PeriClockControl+0xb0>
			SPI3_PCLK_DI;
 800028a:	4b0d      	ldr	r3, [pc, #52]	; (80002c0 <SPI_PeriClockControl+0xd8>)
 800028c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800028e:	4a0c      	ldr	r2, [pc, #48]	; (80002c0 <SPI_PeriClockControl+0xd8>)
 8000290:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000294:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 8000296:	e00b      	b.n	80002b0 <SPI_PeriClockControl+0xc8>
		}else if(pSPIx == SPI4){
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	4a0c      	ldr	r2, [pc, #48]	; (80002cc <SPI_PeriClockControl+0xe4>)
 800029c:	4293      	cmp	r3, r2
 800029e:	d106      	bne.n	80002ae <SPI_PeriClockControl+0xc6>
			SPI4_PCLK_DI;
 80002a0:	4b07      	ldr	r3, [pc, #28]	; (80002c0 <SPI_PeriClockControl+0xd8>)
 80002a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002a4:	4a06      	ldr	r2, [pc, #24]	; (80002c0 <SPI_PeriClockControl+0xd8>)
 80002a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80002aa:	6453      	str	r3, [r2, #68]	; 0x44
			break;
 80002ac:	e000      	b.n	80002b0 <SPI_PeriClockControl+0xc8>
		}default:
			break;
 80002ae:	bf00      	nop

	}
}
 80002b0:	bf00      	nop
 80002b2:	370c      	adds	r7, #12
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr
 80002bc:	40013000 	.word	0x40013000
 80002c0:	40023800 	.word	0x40023800
 80002c4:	40003800 	.word	0x40003800
 80002c8:	40003c00 	.word	0x40003c00
 80002cc:	40003400 	.word	0x40003400

080002d0 <SPI_Init>:

//Init & De-Init
void SPI_Init(SPI_Handle_t *pSPIHandler, uint8_t tx_or_rx)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b084      	sub	sp, #16
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
 80002d8:	460b      	mov	r3, r1
 80002da:	70fb      	strb	r3, [r7, #3]
	SPI_PeriClockControl(pSPIHandler->pSPIx, ENABLE);
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	2101      	movs	r1, #1
 80002e2:	4618      	mov	r0, r3
 80002e4:	f7ff ff80 	bl	80001e8 <SPI_PeriClockControl>

	uint32_t tempReg = 0;
 80002e8:	2300      	movs	r3, #0
 80002ea:	60fb      	str	r3, [r7, #12]
	//configure slave/master for device
	tempReg |= (pSPIHandler->SPI_Config.SPI_DEVICEMODE << SPI_CR1_MSTER);
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	7a5b      	ldrb	r3, [r3, #9]
 80002f0:	009b      	lsls	r3, r3, #2
 80002f2:	461a      	mov	r2, r3
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	4313      	orrs	r3, r2
 80002f8:	60fb      	str	r3, [r7, #12]

	//configure baud rate for SPI peripheral
	tempReg |= (pSPIHandler->SPI_Config.SPI_Speed << SPI_CR1_BAUDRATE);
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	799b      	ldrb	r3, [r3, #6]
 80002fe:	00db      	lsls	r3, r3, #3
 8000300:	461a      	mov	r2, r3
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	4313      	orrs	r3, r2
 8000306:	60fb      	str	r3, [r7, #12]

	//configure slave management
	tempReg |= (pSPIHandler->SPI_Config.SPI_SSM << SPI_CR1_SSM);
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	795b      	ldrb	r3, [r3, #5]
 800030c:	025b      	lsls	r3, r3, #9
 800030e:	461a      	mov	r2, r3
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	4313      	orrs	r3, r2
 8000314:	60fb      	str	r3, [r7, #12]

	tempReg |= (pSPIHandler->SPI_Config.SPI_CPOL << SPI_CR1_CPOL);
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	7a1b      	ldrb	r3, [r3, #8]
 800031a:	005b      	lsls	r3, r3, #1
 800031c:	461a      	mov	r2, r3
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	4313      	orrs	r3, r2
 8000322:	60fb      	str	r3, [r7, #12]

	tempReg |= (pSPIHandler->SPI_Config.SPI_CPHA << SPI_CR1_CPHA);
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	79db      	ldrb	r3, [r3, #7]
 8000328:	461a      	mov	r2, r3
 800032a:	68fb      	ldr	r3, [r7, #12]
 800032c:	4313      	orrs	r3, r2
 800032e:	60fb      	str	r3, [r7, #12]

	SPI_busConfig(pSPIHandler, tx_or_rx);
 8000330:	78fb      	ldrb	r3, [r7, #3]
 8000332:	4619      	mov	r1, r3
 8000334:	6878      	ldr	r0, [r7, #4]
 8000336:	f000 f85a 	bl	80003ee <SPI_busConfig>


//input settings into the register
	pSPIHandler->pSPIx->SPI_CR1 = tempReg;
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	68fa      	ldr	r2, [r7, #12]
 8000340:	601a      	str	r2, [r3, #0]

}
 8000342:	bf00      	nop
 8000344:	3710      	adds	r7, #16
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}

0800034a <SPI_SendData>:

}

//Send/Receive Data - This is a blocking call
void  SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxbuffer, uint32_t len)
{
 800034a:	b580      	push	{r7, lr}
 800034c:	b084      	sub	sp, #16
 800034e:	af00      	add	r7, sp, #0
 8000350:	60f8      	str	r0, [r7, #12]
 8000352:	60b9      	str	r1, [r7, #8]
 8000354:	607a      	str	r2, [r7, #4]
	spi_enable_spe(pSPIx, ENABLE);
 8000356:	2101      	movs	r1, #1
 8000358:	68f8      	ldr	r0, [r7, #12]
 800035a:	f000 f8c4 	bl	80004e6 <spi_enable_spe>

	while(!get_reg_value((uint32_t*)pSPIx, SPI_SR_POSITION, SPI_SR_TXE))
 800035e:	bf00      	nop
 8000360:	2201      	movs	r2, #1
 8000362:	2102      	movs	r1, #2
 8000364:	68f8      	ldr	r0, [r7, #12]
 8000366:	f000 f883 	bl	8000470 <get_reg_value>
 800036a:	4603      	mov	r3, r0
 800036c:	f083 0301 	eor.w	r3, r3, #1
 8000370:	b2db      	uxtb	r3, r3
 8000372:	2b00      	cmp	r3, #0
 8000374:	d1f4      	bne.n	8000360 <SPI_SendData+0x16>
	{

	}
	while(len > 0)
 8000376:	e021      	b.n	80003bc <SPI_SendData+0x72>
	{
		//dff set to 16 bit
		if(pSPIx->SPI_CR1 & (SET  << SPI_CR1_DFF))
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000380:	2b00      	cmp	r3, #0
 8000382:	d00a      	beq.n	800039a <SPI_SendData+0x50>
		{
			pSPIx->SPI_DR = *(uint32_t*)pTxbuffer;
 8000384:	68bb      	ldr	r3, [r7, #8]
 8000386:	681a      	ldr	r2, [r3, #0]
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	60da      	str	r2, [r3, #12]
			len -= 2;
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	3b02      	subs	r3, #2
 8000390:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxbuffer++;
 8000392:	68bb      	ldr	r3, [r7, #8]
 8000394:	3301      	adds	r3, #1
 8000396:	60bb      	str	r3, [r7, #8]
 8000398:	e010      	b.n	80003bc <SPI_SendData+0x72>
		}//dff set to 8 bit
		else if(!(pSPIx->SPI_CR1 & (SET << SPI_CR1_DFF)))
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d10a      	bne.n	80003bc <SPI_SendData+0x72>
		{
			pSPIx->SPI_DR = *pTxbuffer;
 80003a6:	68bb      	ldr	r3, [r7, #8]
 80003a8:	781b      	ldrb	r3, [r3, #0]
 80003aa:	461a      	mov	r2, r3
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	60da      	str	r2, [r3, #12]
			len--;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	3b01      	subs	r3, #1
 80003b4:	607b      	str	r3, [r7, #4]
			pTxbuffer++;
 80003b6:	68bb      	ldr	r3, [r7, #8]
 80003b8:	3301      	adds	r3, #1
 80003ba:	60bb      	str	r3, [r7, #8]
	while(len > 0)
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d1da      	bne.n	8000378 <SPI_SendData+0x2e>
		}
	}
	//wait until tx buffer is empty
	while(!(pSPIx->SPI_SR &  (ENABLE << SPI_SR_TXE)))
 80003c2:	bf00      	nop
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	689b      	ldr	r3, [r3, #8]
 80003c8:	f003 0302 	and.w	r3, r3, #2
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d0f9      	beq.n	80003c4 <SPI_SendData+0x7a>
	{

	}
	//wait for busy flag to clear
	while(pSPIx->SPI_SR & (ENABLE << SPI_SR_BSY))
 80003d0:	bf00      	nop
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	689b      	ldr	r3, [r3, #8]
 80003d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d1f9      	bne.n	80003d2 <SPI_SendData+0x88>
	{

	}
	//then disable spe
	spi_enable_spe(pSPIx, DISABLE);
 80003de:	2100      	movs	r1, #0
 80003e0:	68f8      	ldr	r0, [r7, #12]
 80003e2:	f000 f880 	bl	80004e6 <spi_enable_spe>
}
 80003e6:	bf00      	nop
 80003e8:	3710      	adds	r7, #16
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}

080003ee <SPI_busConfig>:

//use SPI_RX or SPI_TX for tx_or_rx
void SPI_busConfig(SPI_Handle_t *pSPIHandler, uint8_t tx_or_rx)
{
 80003ee:	b480      	push	{r7}
 80003f0:	b083      	sub	sp, #12
 80003f2:	af00      	add	r7, sp, #0
 80003f4:	6078      	str	r0, [r7, #4]
 80003f6:	460b      	mov	r3, r1
 80003f8:	70fb      	strb	r3, [r7, #3]
	if(pSPIHandler->SPI_Config.BusConfig == SPI_CONFIG_FD)
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	791b      	ldrb	r3, [r3, #4]
 80003fe:	2b02      	cmp	r3, #2
 8000400:	d112      	bne.n	8000428 <SPI_busConfig+0x3a>
	{	//reset bidimode for 2 line unidirection data
		pSPIHandler->pSPIx->SPI_CR1 |= (RESET << SPI_CR1_BIDI_MODE);
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681a      	ldr	r2, [r3, #0]
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	6812      	ldr	r2, [r2, #0]
 800040c:	601a      	str	r2, [r3, #0]
		//ensure bidioe is reset not needed for Full duplex
		pSPIHandler->pSPIx->SPI_CR1 |= (RESET << SPI_CR1_BIDI_OE);
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	681a      	ldr	r2, [r3, #0]
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	6812      	ldr	r2, [r2, #0]
 8000418:	601a      	str	r2, [r3, #0]
		//reset rx-only bit
		pSPIHandler->pSPIx->SPI_CR1 |= (RESET << SPI_CR1_RX_ONLY);
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	681a      	ldr	r2, [r3, #0]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	6812      	ldr	r2, [r2, #0]
 8000424:	601a      	str	r2, [r3, #0]
		pSPIHandler->pSPIx->SPI_CR1 |= (RESET << SPI_CR1_RX_ONLY);
		//enable tx or rx mode
		pSPIHandler->pSPIx->SPI_CR1 |= (SET << SPI_CR1_BIDI_OE);

	}
}
 8000426:	e01d      	b.n	8000464 <SPI_busConfig+0x76>
	else if(pSPIHandler->SPI_Config.BusConfig == (uint8_t)SPI_CONFIG_HD || pSPIHandler->SPI_Config.BusConfig == (uint8_t)SPI_SIMPLEX_RX_ONLY)
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	791b      	ldrb	r3, [r3, #4]
 800042c:	2b01      	cmp	r3, #1
 800042e:	d003      	beq.n	8000438 <SPI_busConfig+0x4a>
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	791b      	ldrb	r3, [r3, #4]
 8000434:	2b03      	cmp	r3, #3
 8000436:	d115      	bne.n	8000464 <SPI_busConfig+0x76>
		pSPIHandler->pSPIx->SPI_CR1 |= (SET << SPI_CR1_BIDI_MODE);
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	681a      	ldr	r2, [r3, #0]
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000446:	601a      	str	r2, [r3, #0]
		pSPIHandler->pSPIx->SPI_CR1 |= (RESET << SPI_CR1_RX_ONLY);
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681a      	ldr	r2, [r3, #0]
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	6812      	ldr	r2, [r2, #0]
 8000452:	601a      	str	r2, [r3, #0]
		pSPIHandler->pSPIx->SPI_CR1 |= (SET << SPI_CR1_BIDI_OE);
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000462:	601a      	str	r2, [r3, #0]
}
 8000464:	bf00      	nop
 8000466:	370c      	adds	r7, #12
 8000468:	46bd      	mov	sp, r7
 800046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046e:	4770      	bx	lr

08000470 <get_reg_value>:

bool get_reg_value(uint32_t *address, uint32_t spi_register, uint8_t register_bit)
{
 8000470:	b480      	push	{r7}
 8000472:	b085      	sub	sp, #20
 8000474:	af00      	add	r7, sp, #0
 8000476:	60f8      	str	r0, [r7, #12]
 8000478:	60b9      	str	r1, [r7, #8]
 800047a:	4613      	mov	r3, r2
 800047c:	71fb      	strb	r3, [r7, #7]

	if(register_bit > SPI_IS2PR_POSITION)
 800047e:	79fb      	ldrb	r3, [r7, #7]
 8000480:	2b08      	cmp	r3, #8
 8000482:	d901      	bls.n	8000488 <get_reg_value+0x18>
	{
		return 0;
 8000484:	2300      	movs	r3, #0
 8000486:	e00e      	b.n	80004a6 <get_reg_value+0x36>
	}

	if(*(address + (sizeof(uint32_t) * spi_register)) & (1 << register_bit))
 8000488:	68bb      	ldr	r3, [r7, #8]
 800048a:	011b      	lsls	r3, r3, #4
 800048c:	68fa      	ldr	r2, [r7, #12]
 800048e:	4413      	add	r3, r2
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	79fa      	ldrb	r2, [r7, #7]
 8000494:	2101      	movs	r1, #1
 8000496:	fa01 f202 	lsl.w	r2, r1, r2
 800049a:	4013      	ands	r3, r2
 800049c:	2b00      	cmp	r3, #0
 800049e:	d001      	beq.n	80004a4 <get_reg_value+0x34>
	{
		return true;
 80004a0:	2301      	movs	r3, #1
 80004a2:	e000      	b.n	80004a6 <get_reg_value+0x36>
	}
	else
	{
		return false;
 80004a4:	2300      	movs	r3, #0
	}
}
 80004a6:	4618      	mov	r0, r3
 80004a8:	3714      	adds	r7, #20
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr

080004b2 <SPI_SSOEConfig>:

void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, bool enable)
{
 80004b2:	b480      	push	{r7}
 80004b4:	b083      	sub	sp, #12
 80004b6:	af00      	add	r7, sp, #0
 80004b8:	6078      	str	r0, [r7, #4]
 80004ba:	460b      	mov	r3, r1
 80004bc:	70fb      	strb	r3, [r7, #3]
	if(enable)
 80004be:	78fb      	ldrb	r3, [r7, #3]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d006      	beq.n	80004d2 <SPI_SSOEConfig+0x20>
	{
		pSPIx->SPI_CR2 |= (ENABLE << SPI_CR2_SSOE);
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	685b      	ldr	r3, [r3, #4]
 80004c8:	f043 0204 	orr.w	r2, r3, #4
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	605a      	str	r2, [r3, #4]
	else
	{
		pSPIx->SPI_CR2 |= (DISABLE << SPI_CR2_SSOE);

	}
}
 80004d0:	e003      	b.n	80004da <SPI_SSOEConfig+0x28>
		pSPIx->SPI_CR2 |= (DISABLE << SPI_CR2_SSOE);
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	685a      	ldr	r2, [r3, #4]
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	605a      	str	r2, [r3, #4]
}
 80004da:	bf00      	nop
 80004dc:	370c      	adds	r7, #12
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr

080004e6 <spi_enable_spe>:

void spi_enable_spe(SPI_RegDef_t *spix,  bool enable)
{
 80004e6:	b480      	push	{r7}
 80004e8:	b083      	sub	sp, #12
 80004ea:	af00      	add	r7, sp, #0
 80004ec:	6078      	str	r0, [r7, #4]
 80004ee:	460b      	mov	r3, r1
 80004f0:	70fb      	strb	r3, [r7, #3]
	if(enable)
 80004f2:	78fb      	ldrb	r3, [r7, #3]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d006      	beq.n	8000506 <spi_enable_spe+0x20>
	{
		spix->SPI_CR1 |= (ENABLE << SPI_CR1_SPE);
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	601a      	str	r2, [r3, #0]
	else
	{
		spix->SPI_CR1 &= ~(ENABLE << SPI_CR1_SPE);
	}

}
 8000504:	e005      	b.n	8000512 <spi_enable_spe+0x2c>
		spix->SPI_CR1 &= ~(ENABLE << SPI_CR1_SPE);
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	601a      	str	r2, [r3, #0]
}
 8000512:	bf00      	nop
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
	...

08000520 <GPIO_PeriClockControl>:
 *
 * @Note              -  none
 */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
 8000528:	460b      	mov	r3, r1
 800052a:	70fb      	strb	r3, [r7, #3]

if(EnorDi == ENABLE){
 800052c:	78fb      	ldrb	r3, [r7, #3]
 800052e:	2b01      	cmp	r3, #1
 8000530:	f040 80c5 	bne.w	80006be <GPIO_PeriClockControl+0x19e>
	if(pGPIOx == GPIOA)
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	4a65      	ldr	r2, [pc, #404]	; (80006cc <GPIO_PeriClockControl+0x1ac>)
 8000538:	4293      	cmp	r3, r2
 800053a:	d106      	bne.n	800054a <GPIO_PeriClockControl+0x2a>
	{
		GPIOA_PCLK_EN;
 800053c:	4b64      	ldr	r3, [pc, #400]	; (80006d0 <GPIO_PeriClockControl+0x1b0>)
 800053e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000540:	4a63      	ldr	r2, [pc, #396]	; (80006d0 <GPIO_PeriClockControl+0x1b0>)
 8000542:	f043 0301 	orr.w	r3, r3, #1
 8000546:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOI_PCLK_DI;
		}
	}
}

}
 8000548:	e0b9      	b.n	80006be <GPIO_PeriClockControl+0x19e>
	else if(pGPIOx == GPIOB)
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	4a61      	ldr	r2, [pc, #388]	; (80006d4 <GPIO_PeriClockControl+0x1b4>)
 800054e:	4293      	cmp	r3, r2
 8000550:	d106      	bne.n	8000560 <GPIO_PeriClockControl+0x40>
		GPIOB_PCLK_EN;
 8000552:	4b5f      	ldr	r3, [pc, #380]	; (80006d0 <GPIO_PeriClockControl+0x1b0>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	4a5e      	ldr	r2, [pc, #376]	; (80006d0 <GPIO_PeriClockControl+0x1b0>)
 8000558:	f043 0302 	orr.w	r3, r3, #2
 800055c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800055e:	e0ae      	b.n	80006be <GPIO_PeriClockControl+0x19e>
	else if(pGPIOx == GPIOC)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	4a5d      	ldr	r2, [pc, #372]	; (80006d8 <GPIO_PeriClockControl+0x1b8>)
 8000564:	4293      	cmp	r3, r2
 8000566:	d106      	bne.n	8000576 <GPIO_PeriClockControl+0x56>
		GPIOC_PCLK_EN;
 8000568:	4b59      	ldr	r3, [pc, #356]	; (80006d0 <GPIO_PeriClockControl+0x1b0>)
 800056a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056c:	4a58      	ldr	r2, [pc, #352]	; (80006d0 <GPIO_PeriClockControl+0x1b0>)
 800056e:	f043 0304 	orr.w	r3, r3, #4
 8000572:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000574:	e0a3      	b.n	80006be <GPIO_PeriClockControl+0x19e>
	else if(pGPIOx == GPIOD)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	4a58      	ldr	r2, [pc, #352]	; (80006dc <GPIO_PeriClockControl+0x1bc>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d106      	bne.n	800058c <GPIO_PeriClockControl+0x6c>
		GPIOD_PCLK_EN;
 800057e:	4b54      	ldr	r3, [pc, #336]	; (80006d0 <GPIO_PeriClockControl+0x1b0>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	4a53      	ldr	r2, [pc, #332]	; (80006d0 <GPIO_PeriClockControl+0x1b0>)
 8000584:	f043 0308 	orr.w	r3, r3, #8
 8000588:	6313      	str	r3, [r2, #48]	; 0x30
}
 800058a:	e098      	b.n	80006be <GPIO_PeriClockControl+0x19e>
	else if(pGPIOx == GPIOE)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	4a54      	ldr	r2, [pc, #336]	; (80006e0 <GPIO_PeriClockControl+0x1c0>)
 8000590:	4293      	cmp	r3, r2
 8000592:	d106      	bne.n	80005a2 <GPIO_PeriClockControl+0x82>
		GPIOE_PCLK_EN;
 8000594:	4b4e      	ldr	r3, [pc, #312]	; (80006d0 <GPIO_PeriClockControl+0x1b0>)
 8000596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000598:	4a4d      	ldr	r2, [pc, #308]	; (80006d0 <GPIO_PeriClockControl+0x1b0>)
 800059a:	f043 0310 	orr.w	r3, r3, #16
 800059e:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005a0:	e08d      	b.n	80006be <GPIO_PeriClockControl+0x19e>
	else if(pGPIOx == GPIOF)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4a4f      	ldr	r2, [pc, #316]	; (80006e4 <GPIO_PeriClockControl+0x1c4>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d106      	bne.n	80005b8 <GPIO_PeriClockControl+0x98>
		GPIOF_PCLK_EN;
 80005aa:	4b49      	ldr	r3, [pc, #292]	; (80006d0 <GPIO_PeriClockControl+0x1b0>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	4a48      	ldr	r2, [pc, #288]	; (80006d0 <GPIO_PeriClockControl+0x1b0>)
 80005b0:	f043 0310 	orr.w	r3, r3, #16
 80005b4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005b6:	e082      	b.n	80006be <GPIO_PeriClockControl+0x19e>
	else if(pGPIOx == GPIOG)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	4a4b      	ldr	r2, [pc, #300]	; (80006e8 <GPIO_PeriClockControl+0x1c8>)
 80005bc:	4293      	cmp	r3, r2
 80005be:	d106      	bne.n	80005ce <GPIO_PeriClockControl+0xae>
		GPIOG_PCLK_EN;
 80005c0:	4b43      	ldr	r3, [pc, #268]	; (80006d0 <GPIO_PeriClockControl+0x1b0>)
 80005c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c4:	4a42      	ldr	r2, [pc, #264]	; (80006d0 <GPIO_PeriClockControl+0x1b0>)
 80005c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005ca:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005cc:	e077      	b.n	80006be <GPIO_PeriClockControl+0x19e>
	else if(pGPIOx == GPIOH)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	4a46      	ldr	r2, [pc, #280]	; (80006ec <GPIO_PeriClockControl+0x1cc>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d106      	bne.n	80005e4 <GPIO_PeriClockControl+0xc4>
		GPIOH_PCLK_EN;
 80005d6:	4b3e      	ldr	r3, [pc, #248]	; (80006d0 <GPIO_PeriClockControl+0x1b0>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a3d      	ldr	r2, [pc, #244]	; (80006d0 <GPIO_PeriClockControl+0x1b0>)
 80005dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005e2:	e06c      	b.n	80006be <GPIO_PeriClockControl+0x19e>
	else if(pGPIOx == GPIOI)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	4a42      	ldr	r2, [pc, #264]	; (80006f0 <GPIO_PeriClockControl+0x1d0>)
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d106      	bne.n	80005fa <GPIO_PeriClockControl+0xda>
		GPIOI_PCLK_EN;
 80005ec:	4b38      	ldr	r3, [pc, #224]	; (80006d0 <GPIO_PeriClockControl+0x1b0>)
 80005ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f0:	4a37      	ldr	r2, [pc, #220]	; (80006d0 <GPIO_PeriClockControl+0x1b0>)
 80005f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005f6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005f8:	e061      	b.n	80006be <GPIO_PeriClockControl+0x19e>
		if(pGPIOx == GPIOA)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	4a33      	ldr	r2, [pc, #204]	; (80006cc <GPIO_PeriClockControl+0x1ac>)
 80005fe:	4293      	cmp	r3, r2
 8000600:	d106      	bne.n	8000610 <GPIO_PeriClockControl+0xf0>
			GPIOA_PCLK_DI;
 8000602:	4b33      	ldr	r3, [pc, #204]	; (80006d0 <GPIO_PeriClockControl+0x1b0>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a32      	ldr	r2, [pc, #200]	; (80006d0 <GPIO_PeriClockControl+0x1b0>)
 8000608:	f023 0301 	bic.w	r3, r3, #1
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800060e:	e056      	b.n	80006be <GPIO_PeriClockControl+0x19e>
		else if(pGPIOx == GPIOB)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	4a30      	ldr	r2, [pc, #192]	; (80006d4 <GPIO_PeriClockControl+0x1b4>)
 8000614:	4293      	cmp	r3, r2
 8000616:	d106      	bne.n	8000626 <GPIO_PeriClockControl+0x106>
			GPIOB_PCLK_DI;
 8000618:	4b2d      	ldr	r3, [pc, #180]	; (80006d0 <GPIO_PeriClockControl+0x1b0>)
 800061a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061c:	4a2c      	ldr	r2, [pc, #176]	; (80006d0 <GPIO_PeriClockControl+0x1b0>)
 800061e:	f023 0302 	bic.w	r3, r3, #2
 8000622:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000624:	e04b      	b.n	80006be <GPIO_PeriClockControl+0x19e>
		else if(pGPIOx == GPIOC)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4a2b      	ldr	r2, [pc, #172]	; (80006d8 <GPIO_PeriClockControl+0x1b8>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d106      	bne.n	800063c <GPIO_PeriClockControl+0x11c>
			GPIOC_PCLK_DI;
 800062e:	4b28      	ldr	r3, [pc, #160]	; (80006d0 <GPIO_PeriClockControl+0x1b0>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a27      	ldr	r2, [pc, #156]	; (80006d0 <GPIO_PeriClockControl+0x1b0>)
 8000634:	f023 0304 	bic.w	r3, r3, #4
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
}
 800063a:	e040      	b.n	80006be <GPIO_PeriClockControl+0x19e>
		else if(pGPIOx == GPIOD)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4a27      	ldr	r2, [pc, #156]	; (80006dc <GPIO_PeriClockControl+0x1bc>)
 8000640:	4293      	cmp	r3, r2
 8000642:	d106      	bne.n	8000652 <GPIO_PeriClockControl+0x132>
			GPIOD_PCLK_DI;
 8000644:	4b22      	ldr	r3, [pc, #136]	; (80006d0 <GPIO_PeriClockControl+0x1b0>)
 8000646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000648:	4a21      	ldr	r2, [pc, #132]	; (80006d0 <GPIO_PeriClockControl+0x1b0>)
 800064a:	f023 0308 	bic.w	r3, r3, #8
 800064e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000650:	e035      	b.n	80006be <GPIO_PeriClockControl+0x19e>
		else if(pGPIOx == GPIOE)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4a22      	ldr	r2, [pc, #136]	; (80006e0 <GPIO_PeriClockControl+0x1c0>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d106      	bne.n	8000668 <GPIO_PeriClockControl+0x148>
			GPIOE_PCLK_DI;
 800065a:	4b1d      	ldr	r3, [pc, #116]	; (80006d0 <GPIO_PeriClockControl+0x1b0>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	4a1c      	ldr	r2, [pc, #112]	; (80006d0 <GPIO_PeriClockControl+0x1b0>)
 8000660:	f023 0310 	bic.w	r3, r3, #16
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000666:	e02a      	b.n	80006be <GPIO_PeriClockControl+0x19e>
		else if(pGPIOx == GPIOF)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	4a1e      	ldr	r2, [pc, #120]	; (80006e4 <GPIO_PeriClockControl+0x1c4>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d106      	bne.n	800067e <GPIO_PeriClockControl+0x15e>
			GPIOF_PCLK_DI;
 8000670:	4b17      	ldr	r3, [pc, #92]	; (80006d0 <GPIO_PeriClockControl+0x1b0>)
 8000672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000674:	4a16      	ldr	r2, [pc, #88]	; (80006d0 <GPIO_PeriClockControl+0x1b0>)
 8000676:	f023 0310 	bic.w	r3, r3, #16
 800067a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800067c:	e01f      	b.n	80006be <GPIO_PeriClockControl+0x19e>
		else if(pGPIOx == GPIOG)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4a19      	ldr	r2, [pc, #100]	; (80006e8 <GPIO_PeriClockControl+0x1c8>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d106      	bne.n	8000694 <GPIO_PeriClockControl+0x174>
			GPIOG_PCLK_DI;
 8000686:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <GPIO_PeriClockControl+0x1b0>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a11      	ldr	r2, [pc, #68]	; (80006d0 <GPIO_PeriClockControl+0x1b0>)
 800068c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000692:	e014      	b.n	80006be <GPIO_PeriClockControl+0x19e>
		else if(pGPIOx == GPIOH)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	4a15      	ldr	r2, [pc, #84]	; (80006ec <GPIO_PeriClockControl+0x1cc>)
 8000698:	4293      	cmp	r3, r2
 800069a:	d106      	bne.n	80006aa <GPIO_PeriClockControl+0x18a>
			GPIOH_PCLK_DI;
 800069c:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <GPIO_PeriClockControl+0x1b0>)
 800069e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a0:	4a0b      	ldr	r2, [pc, #44]	; (80006d0 <GPIO_PeriClockControl+0x1b0>)
 80006a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80006a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006a8:	e009      	b.n	80006be <GPIO_PeriClockControl+0x19e>
		else if(pGPIOx == GPIOI)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4a10      	ldr	r2, [pc, #64]	; (80006f0 <GPIO_PeriClockControl+0x1d0>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d105      	bne.n	80006be <GPIO_PeriClockControl+0x19e>
			GPIOI_PCLK_DI;
 80006b2:	4b07      	ldr	r3, [pc, #28]	; (80006d0 <GPIO_PeriClockControl+0x1b0>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a06      	ldr	r2, [pc, #24]	; (80006d0 <GPIO_PeriClockControl+0x1b0>)
 80006b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006be:	bf00      	nop
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	40020000 	.word	0x40020000
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40020400 	.word	0x40020400
 80006d8:	40020800 	.word	0x40020800
 80006dc:	40020c00 	.word	0x40020c00
 80006e0:	40021000 	.word	0x40021000
 80006e4:	40021400 	.word	0x40021400
 80006e8:	40021800 	.word	0x40021800
 80006ec:	40021c00 	.word	0x40021c00
 80006f0:	40022000 	.word	0x40022000

080006f4 <GPIO_Init>:

/*
 *  Init - Deinit
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]

GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2101      	movs	r1, #1
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff ff0c 	bl	8000520 <GPIO_PeriClockControl>

//Configure pin mode

//if interrupt is true
if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode < GPIO_MODE_IT_FT){
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	795b      	ldrb	r3, [r3, #5]
 800070c:	2b03      	cmp	r3, #3
 800070e:	d810      	bhi.n	8000732 <GPIO_Init+0x3e>

	pGPIOHandle->pGPIOx->MODER |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <<
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	681a      	ldr	r2, [r3, #0]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	795b      	ldrb	r3, [r3, #5]
 800071a:	4619      	mov	r1, r3
			(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	791b      	ldrb	r3, [r3, #4]
 8000720:	005b      	lsls	r3, r3, #1
	pGPIOHandle->pGPIOx->MODER |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <<
 8000722:	fa01 f303 	lsl.w	r3, r1, r3
 8000726:	4619      	mov	r1, r3
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	430a      	orrs	r2, r1
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	e0c4      	b.n	80008bc <GPIO_Init+0x1c8>

}else{

	//configure pin mode
	pGPIOHandle->pGPIOx->MODER |= (GPIO_MODE_INPUT << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681a      	ldr	r2, [r3, #0]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	6812      	ldr	r2, [r2, #0]
 800073c:	601a      	str	r2, [r3, #0]

	//configure pin for desired interrupt trigger type
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	795b      	ldrb	r3, [r3, #5]
 8000742:	2b04      	cmp	r3, #4
 8000744:	d117      	bne.n	8000776 <GPIO_Init+0x82>


		//configure falling edge
		EXTI->FTRS |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000746:	4b8c      	ldr	r3, [pc, #560]	; (8000978 <GPIO_Init+0x284>)
 8000748:	68db      	ldr	r3, [r3, #12]
 800074a:	687a      	ldr	r2, [r7, #4]
 800074c:	7912      	ldrb	r2, [r2, #4]
 800074e:	4611      	mov	r1, r2
 8000750:	2201      	movs	r2, #1
 8000752:	408a      	lsls	r2, r1
 8000754:	4611      	mov	r1, r2
 8000756:	4a88      	ldr	r2, [pc, #544]	; (8000978 <GPIO_Init+0x284>)
 8000758:	430b      	orrs	r3, r1
 800075a:	60d3      	str	r3, [r2, #12]
		//make sure that rising edge is clear
		EXTI->RTSR &= ~ (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800075c:	4b86      	ldr	r3, [pc, #536]	; (8000978 <GPIO_Init+0x284>)
 800075e:	689b      	ldr	r3, [r3, #8]
 8000760:	687a      	ldr	r2, [r7, #4]
 8000762:	7912      	ldrb	r2, [r2, #4]
 8000764:	4611      	mov	r1, r2
 8000766:	2201      	movs	r2, #1
 8000768:	408a      	lsls	r2, r1
 800076a:	43d2      	mvns	r2, r2
 800076c:	4611      	mov	r1, r2
 800076e:	4a82      	ldr	r2, [pc, #520]	; (8000978 <GPIO_Init+0x284>)
 8000770:	400b      	ands	r3, r1
 8000772:	6093      	str	r3, [r2, #8]
 8000774:	e035      	b.n	80007e2 <GPIO_Init+0xee>

	}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	795b      	ldrb	r3, [r3, #5]
 800077a:	2b05      	cmp	r3, #5
 800077c:	d117      	bne.n	80007ae <GPIO_Init+0xba>
		//configure for rising edge
		EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800077e:	4b7e      	ldr	r3, [pc, #504]	; (8000978 <GPIO_Init+0x284>)
 8000780:	689b      	ldr	r3, [r3, #8]
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	7912      	ldrb	r2, [r2, #4]
 8000786:	4611      	mov	r1, r2
 8000788:	2201      	movs	r2, #1
 800078a:	408a      	lsls	r2, r1
 800078c:	4611      	mov	r1, r2
 800078e:	4a7a      	ldr	r2, [pc, #488]	; (8000978 <GPIO_Init+0x284>)
 8000790:	430b      	orrs	r3, r1
 8000792:	6093      	str	r3, [r2, #8]
		//make sure falling edge is clear
		EXTI->FTRS &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000794:	4b78      	ldr	r3, [pc, #480]	; (8000978 <GPIO_Init+0x284>)
 8000796:	68db      	ldr	r3, [r3, #12]
 8000798:	687a      	ldr	r2, [r7, #4]
 800079a:	7912      	ldrb	r2, [r2, #4]
 800079c:	4611      	mov	r1, r2
 800079e:	2201      	movs	r2, #1
 80007a0:	408a      	lsls	r2, r1
 80007a2:	43d2      	mvns	r2, r2
 80007a4:	4611      	mov	r1, r2
 80007a6:	4a74      	ldr	r2, [pc, #464]	; (8000978 <GPIO_Init+0x284>)
 80007a8:	400b      	ands	r3, r1
 80007aa:	60d3      	str	r3, [r2, #12]
 80007ac:	e019      	b.n	80007e2 <GPIO_Init+0xee>

	}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	795b      	ldrb	r3, [r3, #5]
 80007b2:	2b06      	cmp	r3, #6
 80007b4:	d115      	bne.n	80007e2 <GPIO_Init+0xee>
		//configure rising & falling edge
		EXTI->FTRS |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007b6:	4b70      	ldr	r3, [pc, #448]	; (8000978 <GPIO_Init+0x284>)
 80007b8:	68db      	ldr	r3, [r3, #12]
 80007ba:	687a      	ldr	r2, [r7, #4]
 80007bc:	7912      	ldrb	r2, [r2, #4]
 80007be:	4611      	mov	r1, r2
 80007c0:	2201      	movs	r2, #1
 80007c2:	408a      	lsls	r2, r1
 80007c4:	4611      	mov	r1, r2
 80007c6:	4a6c      	ldr	r2, [pc, #432]	; (8000978 <GPIO_Init+0x284>)
 80007c8:	430b      	orrs	r3, r1
 80007ca:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007cc:	4b6a      	ldr	r3, [pc, #424]	; (8000978 <GPIO_Init+0x284>)
 80007ce:	689b      	ldr	r3, [r3, #8]
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	7912      	ldrb	r2, [r2, #4]
 80007d4:	4611      	mov	r1, r2
 80007d6:	2201      	movs	r2, #1
 80007d8:	408a      	lsls	r2, r1
 80007da:	4611      	mov	r1, r2
 80007dc:	4a66      	ldr	r2, [pc, #408]	; (8000978 <GPIO_Init+0x284>)
 80007de:	430b      	orrs	r3, r1
 80007e0:	6093      	str	r3, [r2, #8]

	}

	//enable the interrupt over that pin/port + enable pclk for syscfg
	uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	791b      	ldrb	r3, [r3, #4]
 80007e6:	089b      	lsrs	r3, r3, #2
 80007e8:	73fb      	strb	r3, [r7, #15]
	uint8_t temp2 = (4 *(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4) );
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	791b      	ldrb	r3, [r3, #4]
 80007ee:	f003 0303 	and.w	r3, r3, #3
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	73bb      	strb	r3, [r7, #14]
	uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a5f      	ldr	r2, [pc, #380]	; (800097c <GPIO_Init+0x288>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d039      	beq.n	8000876 <GPIO_Init+0x182>
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a5e      	ldr	r2, [pc, #376]	; (8000980 <GPIO_Init+0x28c>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d032      	beq.n	8000872 <GPIO_Init+0x17e>
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a5c      	ldr	r2, [pc, #368]	; (8000984 <GPIO_Init+0x290>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d02b      	beq.n	800086e <GPIO_Init+0x17a>
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a5b      	ldr	r2, [pc, #364]	; (8000988 <GPIO_Init+0x294>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d024      	beq.n	800086a <GPIO_Init+0x176>
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a59      	ldr	r2, [pc, #356]	; (800098c <GPIO_Init+0x298>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d01d      	beq.n	8000866 <GPIO_Init+0x172>
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4a58      	ldr	r2, [pc, #352]	; (8000990 <GPIO_Init+0x29c>)
 8000830:	4293      	cmp	r3, r2
 8000832:	d016      	beq.n	8000862 <GPIO_Init+0x16e>
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a56      	ldr	r2, [pc, #344]	; (8000994 <GPIO_Init+0x2a0>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d00f      	beq.n	800085e <GPIO_Init+0x16a>
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a55      	ldr	r2, [pc, #340]	; (8000998 <GPIO_Init+0x2a4>)
 8000844:	4293      	cmp	r3, r2
 8000846:	d008      	beq.n	800085a <GPIO_Init+0x166>
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a53      	ldr	r2, [pc, #332]	; (800099c <GPIO_Init+0x2a8>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d101      	bne.n	8000856 <GPIO_Init+0x162>
 8000852:	2308      	movs	r3, #8
 8000854:	e010      	b.n	8000878 <GPIO_Init+0x184>
 8000856:	2300      	movs	r3, #0
 8000858:	e00e      	b.n	8000878 <GPIO_Init+0x184>
 800085a:	2307      	movs	r3, #7
 800085c:	e00c      	b.n	8000878 <GPIO_Init+0x184>
 800085e:	2306      	movs	r3, #6
 8000860:	e00a      	b.n	8000878 <GPIO_Init+0x184>
 8000862:	2305      	movs	r3, #5
 8000864:	e008      	b.n	8000878 <GPIO_Init+0x184>
 8000866:	2304      	movs	r3, #4
 8000868:	e006      	b.n	8000878 <GPIO_Init+0x184>
 800086a:	2303      	movs	r3, #3
 800086c:	e004      	b.n	8000878 <GPIO_Init+0x184>
 800086e:	2302      	movs	r3, #2
 8000870:	e002      	b.n	8000878 <GPIO_Init+0x184>
 8000872:	2301      	movs	r3, #1
 8000874:	e000      	b.n	8000878 <GPIO_Init+0x184>
 8000876:	2300      	movs	r3, #0
 8000878:	737b      	strb	r3, [r7, #13]
	SYSCFG_PCLK_EN;
 800087a:	4b49      	ldr	r3, [pc, #292]	; (80009a0 <GPIO_Init+0x2ac>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087e:	4a48      	ldr	r2, [pc, #288]	; (80009a0 <GPIO_Init+0x2ac>)
 8000880:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000884:	6453      	str	r3, [r2, #68]	; 0x44
	SYSCFG->EXTICR[temp1] |= (portCode << temp2);
 8000886:	4a47      	ldr	r2, [pc, #284]	; (80009a4 <GPIO_Init+0x2b0>)
 8000888:	7bfb      	ldrb	r3, [r7, #15]
 800088a:	3302      	adds	r3, #2
 800088c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000890:	7b79      	ldrb	r1, [r7, #13]
 8000892:	7bbb      	ldrb	r3, [r7, #14]
 8000894:	fa01 f303 	lsl.w	r3, r1, r3
 8000898:	4618      	mov	r0, r3
 800089a:	4942      	ldr	r1, [pc, #264]	; (80009a4 <GPIO_Init+0x2b0>)
 800089c:	7bfb      	ldrb	r3, [r7, #15]
 800089e:	4302      	orrs	r2, r0
 80008a0:	3302      	adds	r3, #2
 80008a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//enable exti interrupt using imr
	EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008a6:	4b34      	ldr	r3, [pc, #208]	; (8000978 <GPIO_Init+0x284>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	687a      	ldr	r2, [r7, #4]
 80008ac:	7912      	ldrb	r2, [r2, #4]
 80008ae:	4611      	mov	r1, r2
 80008b0:	2201      	movs	r2, #1
 80008b2:	408a      	lsls	r2, r1
 80008b4:	4611      	mov	r1, r2
 80008b6:	4a30      	ldr	r2, [pc, #192]	; (8000978 <GPIO_Init+0x284>)
 80008b8:	430b      	orrs	r3, r1
 80008ba:	6013      	str	r3, [r2, #0]


}

//configure pin speed
pGPIOHandle->pGPIOx->OSPEEDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed <<
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	689a      	ldr	r2, [r3, #8]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	79db      	ldrb	r3, [r3, #7]
 80008c6:	4619      	mov	r1, r3
		(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	791b      	ldrb	r3, [r3, #4]
 80008cc:	005b      	lsls	r3, r3, #1
pGPIOHandle->pGPIOx->OSPEEDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed <<
 80008ce:	fa01 f303 	lsl.w	r3, r1, r3
 80008d2:	4619      	mov	r1, r3
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	430a      	orrs	r2, r1
 80008da:	609a      	str	r2, [r3, #8]

//Configure Alt Function Mode

if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	795b      	ldrb	r3, [r3, #5]
 80008e0:	2b02      	cmp	r3, #2
 80008e2:	d126      	bne.n	8000932 <GPIO_Init+0x23e>
{
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber > 7)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	791b      	ldrb	r3, [r3, #4]
 80008e8:	2b07      	cmp	r3, #7
 80008ea:	d912      	bls.n	8000912 <GPIO_Init+0x21e>
	{
		pGPIOHandle->pGPIOx->AFRH |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode <<
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	7a5b      	ldrb	r3, [r3, #9]
 80008f6:	4619      	mov	r1, r3
				(4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8)));
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	791b      	ldrb	r3, [r3, #4]
 80008fc:	f003 0307 	and.w	r3, r3, #7
 8000900:	009b      	lsls	r3, r3, #2
		pGPIOHandle->pGPIOx->AFRH |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode <<
 8000902:	fa01 f303 	lsl.w	r3, r1, r3
 8000906:	4619      	mov	r1, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	430a      	orrs	r2, r1
 800090e:	625a      	str	r2, [r3, #36]	; 0x24
 8000910:	e00f      	b.n	8000932 <GPIO_Init+0x23e>
	}
	else
	{
		pGPIOHandle->pGPIOx->AFRL |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode <<
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	6a1a      	ldr	r2, [r3, #32]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	7a5b      	ldrb	r3, [r3, #9]
 800091c:	4619      	mov	r1, r3
						(4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	791b      	ldrb	r3, [r3, #4]
 8000922:	009b      	lsls	r3, r3, #2
		pGPIOHandle->pGPIOx->AFRL |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode <<
 8000924:	fa01 f303 	lsl.w	r3, r1, r3
 8000928:	4619      	mov	r1, r3
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	430a      	orrs	r2, r1
 8000930:	621a      	str	r2, [r3, #32]
	}
}
//Configure open drain/push pull
(pGPIOHandle->pGPIOx->OTYPER |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType  << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));//clear
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	685a      	ldr	r2, [r3, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	799b      	ldrb	r3, [r3, #6]
 800093c:	4619      	mov	r1, r3
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	791b      	ldrb	r3, [r3, #4]
 8000942:	fa01 f303 	lsl.w	r3, r1, r3
 8000946:	4619      	mov	r1, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	430a      	orrs	r2, r1
 800094e:	605a      	str	r2, [r3, #4]

//configure pull up/pull down register
(pGPIOHandle->pGPIOx->PUPDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPDcontrol) <<
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	68da      	ldr	r2, [r3, #12]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	7a1b      	ldrb	r3, [r3, #8]
 800095a:	4619      	mov	r1, r3
		(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));//set
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	791b      	ldrb	r3, [r3, #4]
 8000960:	005b      	lsls	r3, r3, #1
(pGPIOHandle->pGPIOx->PUPDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPDcontrol) <<
 8000962:	fa01 f303 	lsl.w	r3, r1, r3
 8000966:	4619      	mov	r1, r3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	430a      	orrs	r2, r1
 800096e:	60da      	str	r2, [r3, #12]



}
 8000970:	bf00      	nop
 8000972:	3710      	adds	r7, #16
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40013c00 	.word	0x40013c00
 800097c:	40020000 	.word	0x40020000
 8000980:	40020400 	.word	0x40020400
 8000984:	40020800 	.word	0x40020800
 8000988:	40020c00 	.word	0x40020c00
 800098c:	40021000 	.word	0x40021000
 8000990:	40021400 	.word	0x40021400
 8000994:	40021800 	.word	0x40021800
 8000998:	40021c00 	.word	0x40021c00
 800099c:	40022000 	.word	0x40022000
 80009a0:	40023800 	.word	0x40023800
 80009a4:	40013800 	.word	0x40013800

080009a8 <delay>:
#include <stdio.h>
#include <string.h>


void delay(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
	for(int i = 0; i < 500000; i++);
 80009ae:	2300      	movs	r3, #0
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	e002      	b.n	80009ba <delay+0x12>
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	3301      	adds	r3, #1
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4a04      	ldr	r2, [pc, #16]	; (80009d0 <delay+0x28>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	ddf8      	ble.n	80009b4 <delay+0xc>
}
 80009c2:	bf00      	nop
 80009c4:	bf00      	nop
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	0007a11f 	.word	0x0007a11f

080009d4 <spi_config>:
void spi_config(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
	SPI_Handle_t SPIx = {0};
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
	//configure pin for spi2
	SPIx.pSPIx = SPI2;
 80009e4:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <spi_config+0x4c>)
 80009e6:	607b      	str	r3, [r7, #4]
	SPIx.SPI_Config.BusConfig = SPI_CONFIG_FD;
 80009e8:	2302      	movs	r3, #2
 80009ea:	723b      	strb	r3, [r7, #8]
	SPIx.SPI_Config.SPI_CPOL = IDLE_LOW;
 80009ec:	2300      	movs	r3, #0
 80009ee:	733b      	strb	r3, [r7, #12]
	SPIx.SPI_Config.SPI_CPHA = LEADING_EDGE;
 80009f0:	2300      	movs	r3, #0
 80009f2:	72fb      	strb	r3, [r7, #11]
	SPIx.SPI_Config.SPI_DEVICEMODE = SPI_MASTER;
 80009f4:	2301      	movs	r3, #1
 80009f6:	737b      	strb	r3, [r7, #13]
	SPIx.SPI_Config.SPI_SSM = SPI_HW_SSM;
 80009f8:	2300      	movs	r3, #0
 80009fa:	727b      	strb	r3, [r7, #9]
	SPIx.SPI_Config.SPI_DFF = DFF_8BIT;
 80009fc:	2300      	movs	r3, #0
 80009fe:	73bb      	strb	r3, [r7, #14]
	SPIx.SPI_Config.SPI_Speed = DIVISOR_8;
 8000a00:	2302      	movs	r3, #2
 8000a02:	72bb      	strb	r3, [r7, #10]

	SPI_Init(&SPIx, SPI_RX);
 8000a04:	1d3b      	adds	r3, r7, #4
 8000a06:	2100      	movs	r1, #0
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff fc61 	bl	80002d0 <SPI_Init>
	SPI_busConfig(&SPIx, SPI_TX);
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	2101      	movs	r1, #1
 8000a12:	4618      	mov	r0, r3
 8000a14:	f7ff fceb 	bl	80003ee <SPI_busConfig>
}
 8000a18:	bf00      	nop
 8000a1a:	3710      	adds	r7, #16
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40003800 	.word	0x40003800

08000a24 <spi_pin_config>:

void spi_pin_config(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
	//setup MOSI pin
	GPIO_Handle_t gpiox = {0};
 8000a2a:	1d3b      	adds	r3, r7, #4
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
	gpiox.pGPIOx = GPIOB;
 8000a34:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <spi_pin_config+0x54>)
 8000a36:	607b      	str	r3, [r7, #4]
	gpiox.GPIO_PinConfig.GPIO_PinAltFunMode = GPIO_AF5;
 8000a38:	2305      	movs	r3, #5
 8000a3a:	737b      	strb	r3, [r7, #13]
	gpiox.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	727b      	strb	r3, [r7, #9]
	gpiox.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_15;
 8000a40:	230f      	movs	r3, #15
 8000a42:	723b      	strb	r3, [r7, #8]
	gpiox.GPIO_PinConfig.GPIO_PinPuPDcontrol = GPIO_NO_PUPD;
 8000a44:	2300      	movs	r3, #0
 8000a46:	733b      	strb	r3, [r7, #12]
	gpiox.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	72bb      	strb	r3, [r7, #10]
	gpiox.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	72fb      	strb	r3, [r7, #11]
	GPIO_Init(&gpiox);
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff fe4e 	bl	80006f4 <GPIO_Init>

	gpiox.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 8000a58:	230d      	movs	r3, #13
 8000a5a:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&gpiox);
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff fe48 	bl	80006f4 <GPIO_Init>


	gpiox.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_12;
 8000a64:	230c      	movs	r3, #12
 8000a66:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&gpiox);
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fe42 	bl	80006f4 <GPIO_Init>

}
 8000a70:	bf00      	nop
 8000a72:	3710      	adds	r7, #16
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40020400 	.word	0x40020400

08000a7c <user_button>:

void user_button(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
	GPIO_Handle_t pGPIOx = {0};
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]

	pGPIOx.pGPIOx = GPIOA;
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <user_button+0x34>)
 8000a8e:	607b      	str	r3, [r7, #4]
	//This line should do everything needed to enable interrupt in pgpio init
	pGPIOx.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_INPUT;
 8000a90:	2300      	movs	r3, #0
 8000a92:	727b      	strb	r3, [r7, #9]
	pGPIOx.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	723b      	strb	r3, [r7, #8]
	pGPIOx.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	72bb      	strb	r3, [r7, #10]
	pGPIOx.GPIO_PinConfig.GPIO_PinSpeed = GPIO_NO_PUPD;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&pGPIOx);
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff fe26 	bl	80006f4 <GPIO_Init>
}
 8000aa8:	bf00      	nop
 8000aaa:	3710      	adds	r7, #16
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40020000 	.word	0x40020000

08000ab4 <main>:
	GPIO_IRQPriorityConfig(IRQ_NO_EXTI0, PRIORITY_LVL_0);
}


int main(void)
{
 8000ab4:	b590      	push	{r4, r7, lr}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
	//data to send
	char name[] = "Shane Griffith";
 8000aba:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <main+0x4c>)
 8000abc:	463c      	mov	r4, r7
 8000abe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ac0:	c407      	stmia	r4!, {r0, r1, r2}
 8000ac2:	8023      	strh	r3, [r4, #0]
 8000ac4:	3402      	adds	r4, #2
 8000ac6:	0c1b      	lsrs	r3, r3, #16
 8000ac8:	7023      	strb	r3, [r4, #0]

	spi_config();
 8000aca:	f7ff ff83 	bl	80009d4 <spi_config>
	spi_pin_config();
 8000ace:	f7ff ffa9 	bl	8000a24 <spi_pin_config>
	user_button();
 8000ad2:	f7ff ffd3 	bl	8000a7c <user_button>

	SPI_SSOEConfig(SPI2, ENABLE);
 8000ad6:	2101      	movs	r1, #1
 8000ad8:	480a      	ldr	r0, [pc, #40]	; (8000b04 <main+0x50>)
 8000ada:	f7ff fcea 	bl	80004b2 <SPI_SSOEConfig>
	while(1)
	{
		while(!(GPIOA->IDR & (ENABLE << GPIO_PIN_0)))
 8000ade:	bf00      	nop
 8000ae0:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <main+0x54>)
 8000ae2:	691b      	ldr	r3, [r3, #16]
 8000ae4:	f003 0301 	and.w	r3, r3, #1
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d0f9      	beq.n	8000ae0 <main+0x2c>
		{

		}

		delay();
 8000aec:	f7ff ff5c 	bl	80009a8 <delay>

		SPI_SendData(SPI2, (uint8_t*)name, sizeof(name));
 8000af0:	463b      	mov	r3, r7
 8000af2:	220f      	movs	r2, #15
 8000af4:	4619      	mov	r1, r3
 8000af6:	4803      	ldr	r0, [pc, #12]	; (8000b04 <main+0x50>)
 8000af8:	f7ff fc27 	bl	800034a <SPI_SendData>
		while(!(GPIOA->IDR & (ENABLE << GPIO_PIN_0)))
 8000afc:	e7ef      	b.n	8000ade <main+0x2a>
 8000afe:	bf00      	nop
 8000b00:	08000bc0 	.word	0x08000bc0
 8000b04:	40003800 	.word	0x40003800
 8000b08:	40020000 	.word	0x40020000

08000b0c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b0c:	480d      	ldr	r0, [pc, #52]	; (8000b44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b0e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b10:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b14:	480c      	ldr	r0, [pc, #48]	; (8000b48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b16:	490d      	ldr	r1, [pc, #52]	; (8000b4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b18:	4a0d      	ldr	r2, [pc, #52]	; (8000b50 <LoopForever+0xe>)
  movs r3, #0
 8000b1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b1c:	e002      	b.n	8000b24 <LoopCopyDataInit>

08000b1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b22:	3304      	adds	r3, #4

08000b24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b28:	d3f9      	bcc.n	8000b1e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b2a:	4a0a      	ldr	r2, [pc, #40]	; (8000b54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b2c:	4c0a      	ldr	r4, [pc, #40]	; (8000b58 <LoopForever+0x16>)
  movs r3, #0
 8000b2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b30:	e001      	b.n	8000b36 <LoopFillZerobss>

08000b32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b34:	3204      	adds	r2, #4

08000b36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b38:	d3fb      	bcc.n	8000b32 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b3a:	f000 f811 	bl	8000b60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b3e:	f7ff ffb9 	bl	8000ab4 <main>

08000b42 <LoopForever>:

LoopForever:
  b LoopForever
 8000b42:	e7fe      	b.n	8000b42 <LoopForever>
  ldr   r0, =_estack
 8000b44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b4c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000b50:	08000bd8 	.word	0x08000bd8
  ldr r2, =_sbss
 8000b54:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000b58:	2000001c 	.word	0x2000001c

08000b5c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b5c:	e7fe      	b.n	8000b5c <ADC_IRQHandler>
	...

08000b60 <__libc_init_array>:
 8000b60:	b570      	push	{r4, r5, r6, lr}
 8000b62:	4d0d      	ldr	r5, [pc, #52]	; (8000b98 <__libc_init_array+0x38>)
 8000b64:	4c0d      	ldr	r4, [pc, #52]	; (8000b9c <__libc_init_array+0x3c>)
 8000b66:	1b64      	subs	r4, r4, r5
 8000b68:	10a4      	asrs	r4, r4, #2
 8000b6a:	2600      	movs	r6, #0
 8000b6c:	42a6      	cmp	r6, r4
 8000b6e:	d109      	bne.n	8000b84 <__libc_init_array+0x24>
 8000b70:	4d0b      	ldr	r5, [pc, #44]	; (8000ba0 <__libc_init_array+0x40>)
 8000b72:	4c0c      	ldr	r4, [pc, #48]	; (8000ba4 <__libc_init_array+0x44>)
 8000b74:	f000 f818 	bl	8000ba8 <_init>
 8000b78:	1b64      	subs	r4, r4, r5
 8000b7a:	10a4      	asrs	r4, r4, #2
 8000b7c:	2600      	movs	r6, #0
 8000b7e:	42a6      	cmp	r6, r4
 8000b80:	d105      	bne.n	8000b8e <__libc_init_array+0x2e>
 8000b82:	bd70      	pop	{r4, r5, r6, pc}
 8000b84:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b88:	4798      	blx	r3
 8000b8a:	3601      	adds	r6, #1
 8000b8c:	e7ee      	b.n	8000b6c <__libc_init_array+0xc>
 8000b8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b92:	4798      	blx	r3
 8000b94:	3601      	adds	r6, #1
 8000b96:	e7f2      	b.n	8000b7e <__libc_init_array+0x1e>
 8000b98:	08000bd0 	.word	0x08000bd0
 8000b9c:	08000bd0 	.word	0x08000bd0
 8000ba0:	08000bd0 	.word	0x08000bd0
 8000ba4:	08000bd4 	.word	0x08000bd4

08000ba8 <_init>:
 8000ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000baa:	bf00      	nop
 8000bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bae:	bc08      	pop	{r3}
 8000bb0:	469e      	mov	lr, r3
 8000bb2:	4770      	bx	lr

08000bb4 <_fini>:
 8000bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bb6:	bf00      	nop
 8000bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bba:	bc08      	pop	{r3}
 8000bbc:	469e      	mov	lr, r3
 8000bbe:	4770      	bx	lr
